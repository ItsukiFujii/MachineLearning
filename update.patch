Index: 04_Naive Bayesian Model/email Filter/ham/2.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/ham/2.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/ham/2.txt	(date 1551675378000)
@@ -0,0 +1,3 @@
+Yay to you both doing fine!
+
+I'm working on an MBA in Design Strategy at CCA (top art school.)  It's a new program focusing on more of a right-brained creative and strategic approach to management.  I'm an 1/8 of the way done today!
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/ham/5.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/ham/5.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/ham/5.txt	(date 1551675378000)
@@ -0,0 +1,2 @@
+There was a guy at the gas station who told me that if I knew Mandarin
+and Python I could get a job with the FBI.
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/ham/25.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/ham/25.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/ham/25.txt	(date 1551675378000)
@@ -0,0 +1,2 @@
+That is cold.  Is there going to be a retirement party?  
+Are the leaves changing color?
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/emailFilter.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/emailFilter.py	(date 1565861431946)
+++ 04_Naive Bayesian Model/email Filter/emailFilter.py	(date 1565861431946)
@@ -0,0 +1,242 @@
+#!/usr/bin/python3.7
+# -*- coding: utf-8 -*-
+"""
+@Time     :2019/8/14 16:43
+
+@Author   :Yuki
+
+@FileName :emailFilter.py
+
+@E-mail   :fujii20180311@foxmail.com
+"""
+
+import numpy as np
+import random
+import re
+
+"""
+函数说明:将切分的实验样本词条整理成不重复的词条列表，也就是词汇表
+
+Parameters:
+    dataSet - 整理的样本数据集
+Returns:
+    vocabSet - 返回不重复的词条列表，也就是词汇表
+Author:
+    Jack Cui
+Blog:
+    http://blog.csdn.net/c406495762
+Modify:
+    2017-08-11
+"""
+def createVocabList(dataSet):
+    vocabSet = set([])                      #创建一个空的不重复列表
+    for document in dataSet:
+        vocabSet = vocabSet | set(document) #取并集
+    return list(vocabSet)
+
+"""
+函数说明:根据vocabList词汇表，将inputSet向量化，向量的每个元素为1或0
+
+Parameters:
+    vocabList - createVocabList返回的列表
+    inputSet - 切分的词条列表
+Returns:
+    returnVec - 文档向量,词集模型
+Author:
+    Jack Cui
+Blog:
+    http://blog.csdn.net/c406495762
+Modify:
+    2017-08-11
+"""
+def setOfWords2Vec(vocabList, inputSet):
+    returnVec = [0] * len(vocabList)                                    #创建一个其中所含元素都为0的向量
+    for word in inputSet:                                                #遍历每个词条
+        if word in vocabList:                                            #如果词条存在于词汇表中，则置1
+            returnVec[vocabList.index(word)] = 1
+        else: print("the word: %s is not in my Vocabulary!" % word)
+    return returnVec                                                    #返回文档向量
+
+
+"""
+函数说明:根据vocabList词汇表，构建词袋模型
+
+Parameters:
+    vocabList - createVocabList返回的列表
+    inputSet - 切分的词条列表
+Returns:
+    returnVec - 文档向量,词袋模型
+Author:
+    Jack Cui
+Blog:
+    http://blog.csdn.net/c406495762
+Modify:
+    2017-08-14
+"""
+def bagOfWords2VecMN(vocabList, inputSet):
+    returnVec = [0]*len(vocabList)                                        #创建一个其中所含元素都为0的向量
+    for word in inputSet:                                                #遍历每个词条
+        if word in vocabList:                                            #如果词条存在于词汇表中，则计数加一
+            returnVec[vocabList.index(word)] += 1
+    return returnVec                                                    #返回词袋模型
+
+"""
+函数说明:朴素贝叶斯分类器训练函数
+
+Parameters:
+    trainMatrix - 训练文档矩阵，即setOfWords2Vec返回的returnVec构成的矩阵
+    trainCategory - 训练类别标签向量，即loadDataSet返回的classVec
+Returns:
+    p0Vect - 侮辱类的条件概率数组
+    p1Vect - 非侮辱类的条件概率数组
+    pAbusive - 文档属于侮辱类的概率
+Author:
+    Jack Cui
+Blog:
+    http://blog.csdn.net/c406495762
+Modify:
+    2017-08-12
+"""
+def trainNB0(trainMatrix,trainCategory):
+    numTrainDocs = len(trainMatrix)                            #计算训练的文档数目
+    numWords = len(trainMatrix[0])                            #计算每篇文档的词条数
+    pAbusive = sum(trainCategory)/float(numTrainDocs)        #文档属于侮辱类的概率
+    p0Num = np.ones(numWords); p1Num = np.ones(numWords)    #创建numpy.ones数组,词条出现数初始化为1，拉普拉斯平滑
+    p0Denom = 2.0; p1Denom = 2.0                            #分母初始化为2,拉普拉斯平滑
+    for i in range(numTrainDocs):
+        if trainCategory[i] == 1:                            #统计属于侮辱类的条件概率所需的数据，即P(w0|1),P(w1|1),P(w2|1)···
+            p1Num += trainMatrix[i]
+            p1Denom += sum(trainMatrix[i])
+        else:                                                #统计属于非侮辱类的条件概率所需的数据，即P(w0|0),P(w1|0),P(w2|0)···
+            p0Num += trainMatrix[i]
+            p0Denom += sum(trainMatrix[i])
+    p1Vect = np.log(p1Num/p1Denom)                            #取对数，防止下溢出
+    p0Vect = np.log(p0Num/p0Denom)
+    return p0Vect,p1Vect,pAbusive                            #返回属于侮辱类的条件概率数组，属于非侮辱类的条件概率数组，文档属于侮辱类的概率
+
+"""
+函数说明:朴素贝叶斯分类器分类函数
+
+Parameters:
+    vec2Classify - 待分类的词条数组
+    p0Vec - 侮辱类的条件概率数组
+    p1Vec -非侮辱类的条件概率数组
+    pClass1 - 文档属于侮辱类的概率
+Returns:
+    0 - 属于非侮辱类
+    1 - 属于侮辱类
+Author:
+    Jack Cui
+Blog:
+    http://blog.csdn.net/c406495762
+Modify:
+    2017-08-12
+"""
+def classifyNB(vec2Classify, p0Vec, p1Vec, pClass1):
+    p1 = sum(vec2Classify * p1Vec) + np.log(pClass1)        #对应元素相乘。logA * B = logA + logB，所以这里加上log(pClass1)
+    p0 = sum(vec2Classify * p0Vec) + np.log(1.0 - pClass1)
+    if p1 > p0:
+        return 1
+    else:
+        return 0
+
+"""
+函数说明:朴素贝叶斯分类器训练函数
+
+Parameters:
+    trainMatrix - 训练文档矩阵，即setOfWords2Vec返回的returnVec构成的矩阵
+    trainCategory - 训练类别标签向量，即loadDataSet返回的classVec
+Returns:
+    p0Vect - 侮辱类的条件概率数组
+    p1Vect - 非侮辱类的条件概率数组
+    pAbusive - 文档属于侮辱类的概率
+Author:
+    Jack Cui
+Blog:
+    http://blog.csdn.net/c406495762
+Modify:
+    2017-08-12
+"""
+def trainNB0(trainMatrix,trainCategory):
+    numTrainDocs = len(trainMatrix)                            #计算训练的文档数目
+    numWords = len(trainMatrix[0])                            #计算每篇文档的词条数
+    pAbusive = sum(trainCategory)/float(numTrainDocs)        #文档属于侮辱类的概率
+    p0Num = np.ones(numWords); p1Num = np.ones(numWords)    #创建numpy.ones数组,词条出现数初始化为1，拉普拉斯平滑
+    p0Denom = 2.0; p1Denom = 2.0                            #分母初始化为2,拉普拉斯平滑
+    for i in range(numTrainDocs):
+        if trainCategory[i] == 1:                            #统计属于侮辱类的条件概率所需的数据，即P(w0|1),P(w1|1),P(w2|1)···
+            p1Num += trainMatrix[i]
+            p1Denom += sum(trainMatrix[i])
+        else:                                                #统计属于非侮辱类的条件概率所需的数据，即P(w0|0),P(w1|0),P(w2|0)···
+            p0Num += trainMatrix[i]
+            p0Denom += sum(trainMatrix[i])
+    p1Vect = np.log(p1Num/p1Denom)                            #取对数，防止下溢出
+    p0Vect = np.log(p0Num/p0Denom)
+    return p0Vect,p1Vect,pAbusive                            #返回属于侮辱类的条件概率数组，属于非侮辱类的条件概率数组，文档属于侮辱类的概率
+
+
+"""
+函数说明:接收一个大字符串并将其解析为字符串列表
+
+Parameters:
+    无
+Returns:
+    无
+Author:
+    Jack Cui
+Blog:
+    http://blog.csdn.net/c406495762
+Modify:
+    2017-08-14
+"""
+def textParse(bigString):                                                   #将字符串转换为字符列表
+    listOfTokens = re.split(r'\W+', bigString)                              #将特殊符号作为切分标志进行字符串切分，即非字母、非数字
+    return [tok.lower() for tok in listOfTokens if len(tok) > 2]            #除了单个字母，例如大写的I，其它单词变成小写
+
+"""
+函数说明:测试朴素贝叶斯分类器
+
+Parameters:
+    无
+Returns:
+    无
+Author:
+    Jack Cui
+Blog:
+    http://blog.csdn.net/c406495762
+Modify:
+    2017-08-14
+"""
+def spamTest():
+    docList = []; classList = []; fullText = []
+    for i in range(1, 26):                                                  #遍历25个txt文件
+        wordList = textParse(open('./spam/%d.txt' % i, 'r').read())     #读取每个垃圾邮件，并字符串转换成字符串列表
+        docList.append(wordList)
+        fullText.append(wordList)
+        classList.append(1)                                                 #标记垃圾邮件，1表示垃圾文件
+        wordList = textParse(open('./ham/%d.txt' % i, 'r').read())      #读取每个非垃圾邮件，并字符串转换成字符串列表
+        docList.append(wordList)
+        fullText.append(wordList)
+        classList.append(0)                                                 #标记非垃圾邮件，1表示垃圾文件
+    vocabList = createVocabList(docList)                                    #创建词汇表，不重复
+    trainingSet = list(range(50)); testSet = []                             #创建存储训练集的索引值的列表和测试集的索引值的列表
+    for i in range(10):                                                     #从50个邮件中，随机挑选出40个作为训练集,10个做测试集
+        randIndex = int(random.uniform(0, len(trainingSet)))                #随机选取索索引值
+        testSet.append(trainingSet[randIndex])                              #添加测试集的索引值
+        del(trainingSet[randIndex])                                         #在训练集列表中删除添加到测试集的索引值
+    trainMat = []; trainClasses = []                                        #创建训练集矩阵和训练集类别标签系向量
+    for docIndex in trainingSet:                                            #遍历训练集
+        trainMat.append(setOfWords2Vec(vocabList, docList[docIndex]))       #将生成的词集模型添加到训练矩阵中
+        trainClasses.append(classList[docIndex])                            #将类别添加到训练集类别标签系向量中
+    p0V, p1V, pSpam = trainNB0(np.array(trainMat), np.array(trainClasses))  #训练朴素贝叶斯模型
+    errorCount = 0                                                          #错误分类计数
+    for docIndex in testSet:                                                #遍历测试集
+        wordVector = setOfWords2Vec(vocabList, docList[docIndex])           #测试集的词集模型
+        if classifyNB(np.array(wordVector), p0V, p1V, pSpam) != classList[docIndex]:    #如果分类错误
+            errorCount += 1                                                 #错误计数加1
+            print("分类错误的测试集：",docList[docIndex])
+    print('错误率：%.2f%%' % (float(errorCount) / len(testSet) * 100))
+
+
+if __name__ == '__main__':
+    spamTest()
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/__init__.py	(date 1565771263904)
+++ 04_Naive Bayesian Model/email Filter/__init__.py	(date 1565771263904)
@@ -0,0 +1,12 @@
+#!/usr/bin/python3.7
+# -*- coding: utf-8 -*-
+"""
+@Time     :2019/8/14 16:27
+
+@Author   :Yuki
+
+@FileName :__init__.py.py
+
+@E-mail   :fujii20180311@foxmail.com
+"""
+
Index: 04_Naive Bayesian Model/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/__init__.py	(date 1565770191269)
+++ 04_Naive Bayesian Model/__init__.py	(date 1565770191269)
@@ -0,0 +1,185 @@
+#!/usr/bin/python3.7
+# -*- coding: utf-8 -*-
+"""
+@Time     :2019/8/14 9:04
+
+@Author   :Yuki
+
+@FileName :__init__.py
+
+@E-mail   :fujii20180311@foxmail.com
+"""
+
+import numpy as np
+from functools import reduce
+
+"""
+函数说明:创建实验样本
+
+Parameters:
+	无
+Returns:
+	postingList - 实验样本切分的词条
+	classVec - 类别标签向量
+Author:
+	Jack Cui
+Blog:
+	http://blog.csdn.net/c406495762
+Modify:
+	2017-08-11
+"""
+def loadDataSet():
+	postingList=[['my', 'dog', 'has', 'flea', 'problems', 'help', 'please'],				#切分的词条
+				['maybe', 'not', 'take', 'him', 'to', 'dog', 'park', 'stupid'],
+				['my', 'dalmation', 'is', 'so', 'cute', 'I', 'love', 'him'],
+				['stop', 'posting', 'stupid', 'worthless', 'garbage'],
+				['mr', 'licks', 'ate', 'my', 'steak', 'how', 'to', 'stop', 'him'],
+				['quit', 'buying', 'worthless', 'dog', 'food', 'stupid']]
+	classVec = [0,1,0,1,0,1]   																#类别标签向量，1代表侮辱性词汇，0代表不是
+	return postingList,classVec																#返回实验样本切分的词条和类别标签向量
+
+"""
+函数说明:将切分的实验样本词条整理成不重复的词条列表，也就是词汇表
+
+Parameters:
+	dataSet - 整理的样本数据集
+Returns:
+	vocabSet - 返回不重复的词条列表，也就是词汇表
+Author:
+	Jack Cui
+Blog:
+	http://blog.csdn.net/c406495762
+Modify:
+	2017-08-11
+"""
+def createVocabList(dataSet):
+	vocabSet = set([])  					#创建一个空的不重复列表
+	for document in dataSet:
+		vocabSet = vocabSet | set(document) #取并集
+	return list(vocabSet)
+
+"""
+函数说明:根据vocabList词汇表，将inputSet向量化，向量的每个元素为1或0
+
+Parameters:
+	vocabList - createVocabList返回的列表
+	inputSet - 切分的词条列表
+Returns:
+	returnVec - 文档向量,词集模型
+Author:
+	Jack Cui
+Blog:
+	http://blog.csdn.net/c406495762
+Modify:
+	2017-08-11
+"""
+def setOfWords2Vec(vocabList, inputSet):
+	returnVec = [0] * len(vocabList)									#创建一个其中所含元素都为0的向量
+	for word in inputSet:												#遍历每个词条
+		if word in vocabList:											#如果词条存在于词汇表中，则置1
+			returnVec[vocabList.index(word)] = 1
+		else: print("the word: %s is not in my Vocabulary!" % word)
+	return returnVec													#返回文档向量
+
+
+"""
+函数说明:朴素贝叶斯分类器训练函数
+
+Parameters:
+    trainMatrix - 训练文档矩阵，即setOfWords2Vec返回的returnVec构成的矩阵
+    trainCategory - 训练类别标签向量，即loadDataSet返回的classVec
+Returns:
+    p0Vect - 侮辱类的条件概率数组
+    p1Vect - 非侮辱类的条件概率数组
+    pAbusive - 文档属于侮辱类的概率
+Author:
+    Jack Cui
+Blog:
+    http://blog.csdn.net/c406495762
+Modify:
+    2017-08-12
+"""
+def trainNB0(trainMatrix,trainCategory):
+    numTrainDocs = len(trainMatrix)                            #计算训练的文档数目
+    numWords = len(trainMatrix[0])                            #计算每篇文档的词条数
+    pAbusive = sum(trainCategory)/float(numTrainDocs)        #文档属于侮辱类的概率
+    p0Num = np.ones(numWords); p1Num = np.ones(numWords)    #创建numpy.ones数组,词条出现数初始化为1，拉普拉斯平滑
+    p0Denom = 2.0; p1Denom = 2.0                            #分母初始化为2,拉普拉斯平滑
+    for i in range(numTrainDocs):
+        if trainCategory[i] == 1:                            #统计属于侮辱类的条件概率所需的数据，即P(w0|1),P(w1|1),P(w2|1)···
+            p1Num += trainMatrix[i]
+            p1Denom += sum(trainMatrix[i])
+        else:                                                #统计属于非侮辱类的条件概率所需的数据，即P(w0|0),P(w1|0),P(w2|0)···
+            p0Num += trainMatrix[i]
+            p0Denom += sum(trainMatrix[i])
+    p1Vect = np.log(p1Num/p1Denom)                            #取对数，防止下溢出
+    p0Vect = np.log(p0Num/p0Denom)
+    return p0Vect,p1Vect,pAbusive                            #返回属于侮辱类的条件概率数组，属于非侮辱类的条件概率数组，文档属于侮辱类的概率
+
+
+"""
+函数说明:朴素贝叶斯分类器分类函数
+
+Parameters:
+    vec2Classify - 待分类的词条数组
+    p0Vec - 侮辱类的条件概率数组
+    p1Vec -非侮辱类的条件概率数组
+    pClass1 - 文档属于侮辱类的概率
+Returns:
+    0 - 属于非侮辱类
+    1 - 属于侮辱类
+Author:
+    Jack Cui
+Blog:
+    http://blog.csdn.net/c406495762
+Modify:
+    2017-08-12
+"""
+def classifyNB(vec2Classify, p0Vec, p1Vec, pClass1):
+    p1 = sum(vec2Classify * p1Vec) + np.log(pClass1)        #对应元素相乘。logA * B = logA + logB，所以这里加上log(pClass1)
+    p0 = sum(vec2Classify * p0Vec) + np.log(1.0 - pClass1)
+	#print("{0:%.3f},{1:%.3f}".format(p1, p0))
+	#print(p1)
+
+    if p1 > p0:
+        return 1
+    else:
+        return 0
+
+"""
+函数说明:测试朴素贝叶斯分类器
+
+Parameters:
+	无
+Returns:
+	无
+Author:
+	Jack Cui
+Blog:
+	http://blog.csdn.net/c406495762
+Modify:
+	2017-08-12
+"""
+def testingNB():
+	listOPosts, listClasses = loadDataSet() #创建实验样本
+	myVocabList = createVocabList(listOPosts)								#创建词汇表
+	trainMat=[]
+	for postinDoc in listOPosts:
+		trainMat.append(setOfWords2Vec(myVocabList, postinDoc))				#将实验样本向量化
+	p0V,p1V,pAb = trainNB0(np.array(trainMat),np.array(listClasses))		#训练朴素贝叶斯分类器
+	testEntry = ['love', 'my', 'dalmation']									#测试样本1
+	thisDoc = np.array(setOfWords2Vec(myVocabList, testEntry))				#测试样本向量化
+	if classifyNB(thisDoc,p0V,p1V,pAb):
+		print(testEntry,'属于侮辱类')										#执行分类并打印分类结果
+	else:
+		print(testEntry,'属于非侮辱类')										#执行分类并打印分类结果
+	testEntry = ['stupid', 'garbage']										#测试样本2
+
+	thisDoc = np.array(setOfWords2Vec(myVocabList, testEntry))				#测试样本向量化
+	if classifyNB(thisDoc,p0V,p1V,pAb):
+		print(testEntry,'属于侮辱类')										#执行分类并打印分类结果
+	else:
+		print(testEntry,'属于非侮辱类')										#执行分类并打印分类结果
+
+if __name__ == '__main__':
+	testingNB()
\ No newline at end of file
Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/inspectionProfiles/Project_Default.xml	(date 1565771114719)
+++ .idea/inspectionProfiles/Project_Default.xml	(date 1565771114719)
@@ -0,0 +1,89 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="CommandLineInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyAbstractClassInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyArgumentListInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyAssignmentToLoopOrWithParameterInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyAsyncCallInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyAttributeOutsideInitInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyBroadExceptionInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyByteLiteralInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyCallByClassInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyCallingNonCallableInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyChainedComparisonsInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyClassHasNoInitInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyComparisonWithNoneInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyDataclassInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyDecoratorInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyDefaultArgumentInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyDeprecationInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyDictCreationInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyDictDuplicateKeysInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyDocstringTypesInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyDunderSlotsInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyExceptClausesOrderInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyExceptionInheritInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyFromFutureImportInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyGlobalUndefinedInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyInconsistentIndentationInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyIncorrectDocstringInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyInitNewSignatureInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyInterpreterInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyListCreationInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyMethodFirstArgAssignmentInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyMethodMayBeStaticInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyMethodOverridingInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyMethodParametersInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyMissingConstructorInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyNamedTupleInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyNestedDecoratorsInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyNonAsciiCharInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyNoneFunctionAssignmentInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyOldStyleClassesInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyOverloadsInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyPackageRequirementsInspection" enabled="false" level="WARNING" enabled_by_default="false">
+      <option name="ignoredPackages">
+        <value>
+          <list size="0" />
+        </value>
+      </option>
+    </inspection_tool>
+    <inspection_tool class="PyPep8Inspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyPep8NamingInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyPropertyAccessInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyPropertyDefinitionInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyProtectedMemberInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyProtocolInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyRedeclarationInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyRedundantParenthesesInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyReturnFromInitInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PySetFunctionToLiteralInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyShadowingBuiltinsInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyShadowingNamesInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PySimplifyBooleanCheckInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PySingleQuotedDocstringInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyStatementEffectInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyStringExceptionInspection" enabled="false" level="ERROR" enabled_by_default="false" />
+    <inspection_tool class="PyStringFormatInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyStubPackagesAdvertiser" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyStubPackagesCompatibilityInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PySuperArgumentsInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyTestParametrizedInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyTrailingSemicolonInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyTupleAssignmentBalanceInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyTupleItemAssignmentInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyTypeCheckerInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyTypeHintsInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyUnboundLocalVariableInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyUnnecessaryBackslashInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyUnreachableCodeInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyUnresolvedReferencesInspection" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="PyUnusedLocalInspection" enabled="false" level="WEAK WARNING" enabled_by_default="false">
+      <option name="ignoreTupleUnpacking" value="true" />
+      <option name="ignoreLambdaParameters" value="true" />
+      <option name="ignoreLoopIterationVariables" value="true" />
+      <option name="ignoreVariablesStartingWithUnderscore" value="true" />
+    </inspection_tool>
+  </profile>
+</component>
\ No newline at end of file
Index: 02_kNN/kNN.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 02_kNN/kNN.py	(date 1565688082454)
+++ 02_kNN/kNN.py	(date 1565688082454)
@@ -0,0 +1,58 @@
+#!/usr/bin/python3.7
+# -*- coding: utf-8 -*-
+"""
+@Time     :2019/7/29 8:52
+
+@Author   :Yuki
+
+@FileName :kNN.py
+
+@E-mail   :fujii20180311@foxmail.com
+"""
+
+import numpy as np
+import operator
+
+def createDataSet():
+    #四组二维特征
+    group = np.array([[1, 101], [5, 89], [108, 5], [115, 8]])
+    #四组特征的标签
+    labels = ['爱情片', '爱情片', '动作片', '动作片']
+    return group, labels
+
+def classify0(inX, dataSet, labels, k):
+    #numpy函数shape[0]返回dataSet的行数
+    dataSetSize = dataSet.shape[0]
+    #在列向量方向上重复inX共1次(横向)，行向量方向上重复inX共dataSetSize次(纵向)
+    diffMat = np.tile(inX, (dataSetSize, 1)) - dataSet
+    #二维特征相减后平方
+    sqDiffMat = diffMat**2
+    #sum()所有元素相加，sum(0)列相加，sum(1)行相加
+    sqDistances = sqDiffMat.sum(axis=1)
+    #开方，计算出距离
+    distances = sqDistances**0.5
+    #返回distances中元素从小到大排序后的索引值
+    sortedDistIndices = distances.argsort()
+    #定一个记录类别次数的字典
+    classCount = {}
+    for i in range(k):
+        #取出前k个元素的类别
+        voteIlabel = labels[sortedDistIndices[i]]
+        #dict.get(key,default=None),字典的get()方法,返回指定键的值,如果值不在字典中返回默认值。
+        #计算类别次数
+        classCount[voteIlabel] = classCount.get(voteIlabel,0) + 1
+    #python3中用items()替换python2中的iteritems()
+    #key=operator.itemgetter(1)根据字典的值进行排序
+    #key=operator.itemgetter(0)根据字典的键进行排序
+    #reverse降序排序字典
+    sortedClassCount = sorted(classCount.items(),key=operator.itemgetter(1),reverse=True)
+    print(sortedClassCount)
+    #返回次数最多的类别,即所要分类的类别
+    return sortedClassCount[0][0]
+if __name__ == '__main__':
+    #创建数据集
+    group, labels = createDataSet()
+    #打印数据集
+    print(group.shape)
+    print(labels)
+    print(classify0([10, 90], group, labels, 2))
\ No newline at end of file
Index: 02_kNN/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 02_kNN/__init__.py	(date 1565488580438)
+++ 02_kNN/__init__.py	(date 1565488580438)
@@ -0,0 +1,417 @@
+#!/usr/bin/python3.7
+# -*- coding: utf-8 -*-
+"""
+@Time     :2019/7/28 19:59
+
+@Author   :Yuki
+
+@FileName :__init__.py.py
+
+@E-mail   :fujii20180311@foxmail.com
+"""
+# -*- coding: UTF-8 -*-
+from matplotlib.font_manager import FontProperties
+import matplotlib.pyplot as plt
+from math import log
+import operator
+
+"""
+函数说明:计算给定数据集的经验熵(香农熵)
+
+Parameters:
+    dataSet - 数据集
+Returns:
+    shannonEnt - 经验熵(香农熵)
+Author:
+    Jack Cui
+Blog:
+    http://blog.csdn.net/c406495762
+Modify:
+    2017-07-24
+"""
+def calcShannonEnt(dataSet):
+    numEntires = len(dataSet)                        #返回数据集的行数
+    labelCounts = {}                                #保存每个标签(Label)出现次数的字典
+    for featVec in dataSet:                            #对每组特征向量进行统计
+        currentLabel = featVec[-1]                    #提取标签(Label)信息
+        if currentLabel not in labelCounts.keys():    #如果标签(Label)没有放入统计次数的字典,添加进去
+            labelCounts[currentLabel] = 0
+        labelCounts[currentLabel] += 1                #Label计数
+    shannonEnt = 0.0                                #经验熵(香农熵)
+    for key in labelCounts:                            #计算香农熵
+        prob = float(labelCounts[key]) / numEntires    #选择该标签(Label)的概率
+        shannonEnt -= prob * log(prob, 2)            #利用公式计算
+    return shannonEnt                                #返回经验熵(香农熵)
+
+"""
+函数说明:创建测试数据集
+
+Parameters:
+    无
+Returns:
+    dataSet - 数据集
+    labels - 特征标签
+Author:
+    Jack Cui
+Blog:
+    http://blog.csdn.net/c406495762
+Modify:
+    2017-07-20
+"""
+def createDataSet():
+    dataSet = [[0, 0, 0, 0, 'no'],                        #数据集
+            [0, 0, 0, 1, 'no'],
+            [0, 1, 0, 1, 'yes'],
+            [0, 1, 1, 0, 'yes'],
+            [0, 0, 0, 0, 'no'],
+            [1, 0, 0, 0, 'no'],
+            [1, 0, 0, 1, 'no'],
+            [1, 1, 1, 1, 'yes'],
+            [1, 0, 1, 2, 'yes'],
+            [1, 0, 1, 2, 'yes'],
+            [2, 0, 1, 2, 'yes'],
+            [2, 0, 1, 1, 'yes'],
+            [2, 1, 0, 1, 'yes'],
+            [2, 1, 0, 2, 'yes'],
+            [2, 0, 0, 0, 'no']]
+    labels = ['年龄', '有工作', '有自己的房子', '信贷情况']        #特征标签
+    return dataSet, labels                             #返回数据集和分类属性
+
+"""
+函数说明:按照给定特征划分数据集
+
+Parameters:
+    dataSet - 待划分的数据集
+    axis - 划分数据集的特征
+    value - 需要返回的特征的值
+Returns:
+    无
+Author:
+    Jack Cui
+Blog:
+    http://blog.csdn.net/c406495762
+Modify:
+    2017-07-24
+"""
+def splitDataSet(dataSet, axis, value):
+    retDataSet = []                                        #创建返回的数据集列表
+    for featVec in dataSet:                             #遍历数据集
+        if featVec[axis] == value:
+            reducedFeatVec = featVec[:axis]                #去掉axis特征
+            reducedFeatVec.extend(featVec[axis+1:])     #将符合条件的添加到返回的数据集
+            retDataSet.append(reducedFeatVec)
+    return retDataSet                                      #返回划分后的数据集
+
+"""
+函数说明:选择最优特征
+
+Parameters:
+    dataSet - 数据集
+Returns:
+    bestFeature - 信息增益最大的(最优)特征的索引值
+Author:
+    Jack Cui
+Blog:
+    http://blog.csdn.net/c406495762
+Modify:
+    2017-07-20
+"""
+def chooseBestFeatureToSplit(dataSet):
+    numFeatures = len(dataSet[0]) - 1                    #特征数量
+    baseEntropy = calcShannonEnt(dataSet)                 #计算数据集的香农熵
+    bestInfoGain = 0.0                                  #信息增益
+    bestFeature = -1                                    #最优特征的索引值
+    for i in range(numFeatures):                         #遍历所有特征
+        #获取dataSet的第i个所有特征
+        featList = [example[i] for example in dataSet]
+        uniqueVals = set(featList)                         #创建set集合{},元素不可重复
+        newEntropy = 0.0                                  #经验条件熵
+        for value in uniqueVals:                         #计算信息增益
+            subDataSet = splitDataSet(dataSet, i, value)         #subDataSet划分后的子集
+            prob = len(subDataSet) / float(len(dataSet))           #计算子集的概率
+            newEntropy += prob * calcShannonEnt(subDataSet)     #根据公式计算经验条件熵
+        infoGain = baseEntropy - newEntropy                     #信息增益
+        # print("第%d个特征的增益为%.3f" % (i, infoGain))            #打印每个特征的信息增益
+        if (infoGain > bestInfoGain):                             #计算信息增益
+            bestInfoGain = infoGain                             #更新信息增益，找到最大的信息增益
+            bestFeature = i                                     #记录信息增益最大的特征的索引值
+    return bestFeature                                             #返回信息增益最大的特征的索引值
+
+
+"""
+函数说明:统计classList中出现此处最多的元素(类标签)
+
+Parameters:
+    classList - 类标签列表
+Returns:
+    sortedClassCount[0][0] - 出现此处最多的元素(类标签)
+Author:
+    Jack Cui
+Blog:
+    http://blog.csdn.net/c406495762
+Modify:
+    2017-07-24
+"""
+def majorityCnt(classList):
+    classCount = {}
+    for vote in classList:                                        #统计classList中每个元素出现的次数
+        if vote not in classCount.keys():classCount[vote] = 0
+        classCount[vote] += 1
+    sortedClassCount = sorted(classCount.items(), key = operator.itemgetter(1), reverse = True)        #根据字典的值降序排序
+    return sortedClassCount[0][0]                                #返回classList中出现次数最多的元素
+
+"""
+函数说明:创建决策树
+
+Parameters:
+    dataSet - 训练数据集
+    labels - 分类属性标签
+    featLabels - 存储选择的最优特征标签
+Returns:
+    myTree - 决策树
+Author:
+    Jack Cui
+Blog:
+    http://blog.csdn.net/c406495762
+Modify:
+    2017-07-25
+"""
+def createTree(dataSet, labels, featLabels):
+    classList = [example[-1] for example in dataSet]            #取分类标签(是否放贷:yes or no)
+    if classList.count(classList[0]) == len(classList):            #如果类别完全相同则停止继续划分
+        return classList[0]
+    if len(dataSet[0]) == 1:                                    #遍历完所有特征时返回出现次数最多的类标签
+        return majorityCnt(classList)
+    bestFeat = chooseBestFeatureToSplit(dataSet)                #选择最优特征
+    bestFeatLabel = labels[bestFeat]                            #最优特征的标签
+    featLabels.append(bestFeatLabel)
+    myTree = {bestFeatLabel:{}}                                    #根据最优特征的标签生成树
+    del(labels[bestFeat])                                        #删除已经使用特征标签
+    featValues = [example[bestFeat] for example in dataSet]        #得到训练集中所有最优特征的属性值
+    uniqueVals = set(featValues)                                #去掉重复的属性值
+    for value in uniqueVals:                                    #遍历特征，创建决策树。
+        myTree[bestFeatLabel][value] = createTree(splitDataSet(dataSet, bestFeat, value), labels, featLabels)
+    return myTree
+
+"""
+函数说明:获取决策树叶子结点的数目
+
+Parameters:
+    myTree - 决策树
+Returns:
+    numLeafs - 决策树的叶子结点的数目
+Author:
+    Jack Cui
+Blog:
+    http://blog.csdn.net/c406495762
+Modify:
+    2017-07-24
+"""
+def getNumLeafs(myTree):
+    numLeafs = 0                                                #初始化叶子
+    firstStr = next(iter(myTree))                                #python3中myTree.keys()返回的是dict_keys,不在是list,所以不能使用myTree.keys()[0]的方法获取结点属性，可以使用list(myTree.keys())[0]
+    secondDict = myTree[firstStr]                                #获取下一组字典
+    for key in secondDict.keys():
+        if type(secondDict[key]).__name__=='dict':                #测试该结点是否为字典，如果不是字典，代表此结点为叶子结点
+            numLeafs += getNumLeafs(secondDict[key])
+        else:   numLeafs +=1
+    return numLeafs
+
+"""
+函数说明:获取决策树的层数
+
+Parameters:
+    myTree - 决策树
+Returns:
+    maxDepth - 决策树的层数
+Author:
+    Jack Cui
+Blog:
+    http://blog.csdn.net/c406495762
+Modify:
+    2017-07-24
+"""
+def getTreeDepth(myTree):
+    maxDepth = 0                                                #初始化决策树深度
+    firstStr = next(iter(myTree))                                #python3中myTree.keys()返回的是dict_keys,不在是list,所以不能使用myTree.keys()[0]的方法获取结点属性，可以使用list(myTree.keys())[0]
+    secondDict = myTree[firstStr]                                #获取下一个字典
+    for key in secondDict.keys():
+        if type(secondDict[key]).__name__=='dict':                #测试该结点是否为字典，如果不是字典，代表此结点为叶子结点
+            thisDepth = 1 + getTreeDepth(secondDict[key])
+        else:   thisDepth = 1
+        if thisDepth > maxDepth: maxDepth = thisDepth            #更新层数
+    return maxDepth
+
+"""
+函数说明:绘制结点
+
+Parameters:
+    nodeTxt - 结点名
+    centerPt - 文本位置
+    parentPt - 标注的箭头位置
+    nodeType - 结点格式
+Returns:
+    无
+Author:
+    Jack Cui
+Blog:
+    http://blog.csdn.net/c406495762
+Modify:
+    2017-07-24
+"""
+def plotNode(nodeTxt, centerPt, parentPt, nodeType):
+    arrow_args = dict(arrowstyle="<-")                                            #定义箭头格式
+    font = FontProperties(fname=r"c:\windows\fonts\simsun.ttc", size=14)        #设置中文字体
+    '''
+        Axes.annotate(s, xy, *args, **kwargs)
+        s：注释文本的内容
+        xy：被注释的坐标点，二维元组形如(x,y)
+        xytext：注释文本的坐标点，也是二维元组，默认与xy相同
+        xycoords：被注释点的坐标系属性，允许输入的值如下
+            'figure points'	以绘图区左下角为参考，单位是点数
+            'figure pixels'	以绘图区左下角为参考，单位是像素数
+            'figure fraction'	以绘图区左下角为参考，单位是百分比
+            'axes points'	以子绘图区左下角为参考，单位是点数（一个figure可以有多个axex，默认为1个）
+            'axes pixels'	以子绘图区左下角为参考，单位是像素数
+            'axes fraction'	以子绘图区左下角为参考，单位是百分比
+            'data'	以被注释的坐标点xy为参考 (默认值)
+            'polar'	不使用本地数据坐标系，使用极坐标系
+        arrowprops：箭头的样式，dict（字典）型数据，如果该属性非空，
+        则会在注释文本和被注释点之间画一个箭头。如果不设置'arrowstyle' 
+        关键字，则允许包含以下关键字：
+            width	箭头的宽度（单位是点）
+            headwidth	箭头头部的宽度（点）
+            headlength	箭头头部的长度（点）
+            shrink	箭头两端收缩的百分比（占总长）
+            ?	任何 matplotlib.patches.FancyArrowPatch中的关键字
+        bbox:设置边框样式
+    
+    '''
+    createPlot.ax1.annotate(nodeTxt, xy=parentPt,  xycoords='axes fraction',    #绘制结点
+        xytext=centerPt, textcoords='axes fraction',
+        va="center", ha="center", bbox=nodeType, arrowprops=arrow_args, FontProperties=font)
+
+"""
+函数说明:标注有向边属性值
+
+Parameters:
+    cntrPt、parentPt - 用于计算标注位置
+    txtString - 标注的内容
+Returns:
+    无
+Author:
+    Jack Cui
+Blog:
+    http://blog.csdn.net/c406495762
+Modify:
+    2017-07-24
+"""
+def plotMidText(cntrPt, parentPt, txtString):
+    xMid = (parentPt[0]-cntrPt[0])/2.0 + cntrPt[0]                                            #计算标注位置
+    yMid = (parentPt[1]-cntrPt[1])/2.0 + cntrPt[1]
+    createPlot.ax1.text(xMid, yMid, txtString, va="center", ha="center", rotation=30)
+
+"""
+函数说明:绘制决策树
+
+Parameters:
+    myTree - 决策树(字典)
+    parentPt - 标注的内容
+    nodeTxt - 结点名
+Returns:
+    无
+Author:
+    Jack Cui
+Blog:
+    http://blog.csdn.net/c406495762
+Modify:
+    2017-07-24
+"""
+def plotTree(myTree, parentPt, nodeTxt):
+    #边框为锯齿
+    decisionNode = dict(boxstyle="sawtooth", fc="0.8")                                        #设置结点格式
+    leafNode = dict(boxstyle="round4", fc="0.8")                                            #设置叶结点格式
+    numLeafs = getNumLeafs(myTree)                                                          #获取决策树叶结点数目，决定了树的宽度
+    depth = getTreeDepth(myTree)                                                            #获取决策树层数
+    #获取下一个key
+    #我们可以通过iter()函数获取这些可迭代对象的迭代器。
+    #然后我们可以对获取到的迭代器不断使⽤next()函数来获取下⼀条数据对于字典是key
+    firstStr = next(iter(myTree))                                                            #下个字典
+    cntrPt = (plotTree.xOff + (1.0 + float(numLeafs))/2.0/plotTree.totalW, plotTree.yOff)    #中心位置
+    plotMidText(cntrPt, parentPt, nodeTxt)                                                    #标注有向边属性值
+    plotNode(firstStr, cntrPt, parentPt, decisionNode)                                        #绘制结点
+    secondDict = myTree[firstStr]                                                            #下一个字典，也就是继续绘制子结点
+    plotTree.yOff = plotTree.yOff - 1.0/plotTree.totalD                                        #y偏移
+    for key in secondDict.keys():
+        if type(secondDict[key]).__name__=='dict':                                            #测试该结点是否为字典，如果不是字典，代表此结点为叶子结点
+            plotTree(secondDict[key],cntrPt,str(key))                                        #不是叶结点，递归调用继续绘制
+        else:                                                                                #如果是叶结点，绘制叶结点，并标注有向边属性值
+            plotTree.xOff = plotTree.xOff + 1.0/plotTree.totalW
+            plotNode(secondDict[key], (plotTree.xOff, plotTree.yOff), cntrPt, leafNode)
+            plotMidText((plotTree.xOff, plotTree.yOff), cntrPt, str(key))
+    plotTree.yOff = plotTree.yOff + 1.0/plotTree.totalD
+
+"""
+函数说明:创建绘制面板
+
+Parameters:
+    inTree - 决策树(字典)
+Returns:
+    无
+Author:
+    Jack Cui
+Blog:
+    http://blog.csdn.net/c406495762
+Modify:
+    2017-07-24
+"""
+def createPlot(inTree):
+    fig = plt.figure(1, facecolor='white')                                                    #创建fig
+    fig.clf()                                                                                #清空fig
+    axprops = dict(xticks=[], yticks=[])#设置X，Y轴方法--刻度、标签
+    createPlot.ax1 = plt.subplot(111, frameon=False, **axprops)                                #去掉x、y轴
+    plotTree.totalW = float(getNumLeafs(inTree))                                            #获取决策树叶结点数目
+    plotTree.totalD = float(getTreeDepth(inTree))                                            #获取决策树层数
+    plotTree.xOff = -0.5/plotTree.totalW; plotTree.yOff = 1.0;                                #x偏移
+    plotTree(inTree, (0.5,1.0), '')                                                            #绘制决策树
+    plt.show()                                                                                 #显示绘制结果
+
+"""
+函数说明:使用决策树分类
+
+Parameters:
+    inputTree - 已经生成的决策树
+    featLabels - 存储选择的最优特征标签
+    testVec - 测试数据列表，顺序对应最优特征标签
+Returns:
+    classLabel - 分类结果
+Author:
+    Jack Cui
+Blog:
+    http://blog.csdn.net/c406495762
+Modify:
+    2017-07-25
+"""
+def classify(inputTree, featLabels, testVec):
+    firstStr = next(iter(inputTree))                                                        #获取决策树结点
+    secondDict = inputTree[firstStr]                                                        #下一个字典
+    featIndex = featLabels.index(firstStr)
+    for key in secondDict.keys():
+        if testVec[featIndex] == key:
+            if type(secondDict[key]).__name__ == 'dict':
+                classLabel = classify(secondDict[key], featLabels, testVec)
+            else: classLabel = secondDict[key]
+    return classLabel
+
+if __name__ == '__main__':
+    dataSet, labels = createDataSet()
+    featLabels = []
+    ret = calcShannonEnt(dataSet)
+    print(ret)
+    # myTree = createTree(dataSet, labels, featLabels)
+    # testVec = [0,1]                                        #测试数据
+    # result = classify(myTree, featLabels, testVec)
+    # if result == 'yes':
+    #     print('放贷')
+    # if result == 'no':
+    #     print('不放贷')
\ No newline at end of file
Index: 02_kNN/简单的kNN/KNN_test01.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 02_kNN/简单的kNN/KNN_test01.py	(date 1565157352018)
+++ 02_kNN/简单的kNN/KNN_test01.py	(date 1565157352018)
@@ -0,0 +1,76 @@
+#!/usr/bin/python3.7
+# -*- coding: utf-8 -*-
+import numpy as np
+import operator
+"""
+@Time     :2019/8/7 12:54
+
+@Author   :Yuki
+
+@FileName :KNN_test01.py
+
+@E-mail   :fujii20180311@foxmail.com
+"""
+
+'''
+函数说明：创建数据集
+
+Parameters：
+    无
+    
+Returns：
+    group：数据集
+    labels：标签集
+'''
+
+def createDataSet():
+    group = np.array([[3, 104], [2, 100], [101, 10], [99, 5]])
+    labels = ['爱情片', '爱情片', '动作片', '动作片']
+    return group, labels
+'''
+函数说明：kNN分类
+
+Parameters：
+    inX：测试数据
+    dataSet：训练集
+    labels：标签集
+    k：kNN参数，选择距离最近的k个点
+'''
+def classify0(inX, dataSet, labels, k):
+    #训练集的行数
+    dataSetSize = dataSet.shape[0]
+    #横向扩展dataSetSize次，纵向扩展1次
+    diffMat = np.tile(inX, (dataSetSize, 1))-dataSet
+    #二维特征相减后，求平方
+    sqDiffMat = diffMat**2
+    #sum()函数，列方向上相加
+    sqDistances = sqDiffMat.sum(axis=1)
+    #开根号求得距离值
+    distances = sqDistances**0.5
+    #返回distances中元素从小到大排序后得索引值
+    sortedDistIndicies = distances.argsort()
+    #记录类别次数得字典
+    classCount = {}
+    for i in range(k):
+        #取出前k个元素得类别
+        voteIlabel = labels[sortedDistIndicies[i]]
+        #dict.get(key, default)函数，返回指定key的value，否则返回default
+        classCount[voteIlabel] = classCount.get(voteIlabel, 0)+1
+    #items,将字典键值对封装成元组
+    #operator.itemgetter(0),对字典的键进行排序
+    #operator.itemgetter(1),对字典的值进行排序
+    #reverse降序排序
+    sortedClassCount = sorted(classCount.items(), key=operator.itemgetter(1), reverse=True)
+    #返回出现次数最多的类型
+    return sortedClassCount[0][0]
+if __name__ == '__main__':
+    #创建数据集，和分类标签
+    group, labels = createDataSet()
+    #创建测试集
+    test = [101, 20]
+    #kNN分类
+    test_class = classify0(test, group, labels, 3)
+    #打印分类结果
+    print(test_class)
+
+
Index: 02_kNN/海伦约会/datingTestSet2.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 02_kNN/海伦约会/datingTestSet2.txt	(date 1455807009000)
+++ 02_kNN/海伦约会/datingTestSet2.txt	(date 1455807009000)
@@ -0,0 +1,1000 @@
+40920	8.326976	0.953952	3
+14488	7.153469	1.673904	2
+26052	1.441871	0.805124	1
+75136	13.147394	0.428964	1
+38344	1.669788	0.134296	1
+72993	10.141740	1.032955	1
+35948	6.830792	1.213192	3
+42666	13.276369	0.543880	3
+67497	8.631577	0.749278	1
+35483	12.273169	1.508053	3
+50242	3.723498	0.831917	1
+63275	8.385879	1.669485	1
+5569	4.875435	0.728658	2
+51052	4.680098	0.625224	1
+77372	15.299570	0.331351	1
+43673	1.889461	0.191283	1
+61364	7.516754	1.269164	1
+69673	14.239195	0.261333	1
+15669	0.000000	1.250185	2
+28488	10.528555	1.304844	3
+6487	3.540265	0.822483	2
+37708	2.991551	0.833920	1
+22620	5.297865	0.638306	2
+28782	6.593803	0.187108	3
+19739	2.816760	1.686209	2
+36788	12.458258	0.649617	3
+5741	0.000000	1.656418	2
+28567	9.968648	0.731232	3
+6808	1.364838	0.640103	2
+41611	0.230453	1.151996	1
+36661	11.865402	0.882810	3
+43605	0.120460	1.352013	1
+15360	8.545204	1.340429	3
+63796	5.856649	0.160006	1
+10743	9.665618	0.778626	2
+70808	9.778763	1.084103	1
+72011	4.932976	0.632026	1
+5914	2.216246	0.587095	2
+14851	14.305636	0.632317	3
+33553	12.591889	0.686581	3
+44952	3.424649	1.004504	1
+17934	0.000000	0.147573	2
+27738	8.533823	0.205324	3
+29290	9.829528	0.238620	3
+42330	11.492186	0.263499	3
+36429	3.570968	0.832254	1
+39623	1.771228	0.207612	1
+32404	3.513921	0.991854	1
+27268	4.398172	0.975024	1
+5477	4.276823	1.174874	2
+14254	5.946014	1.614244	2
+68613	13.798970	0.724375	1
+41539	10.393591	1.663724	3
+7917	3.007577	0.297302	2
+21331	1.031938	0.486174	2
+8338	4.751212	0.064693	2
+5176	3.692269	1.655113	2
+18983	10.448091	0.267652	3
+68837	10.585786	0.329557	1
+13438	1.604501	0.069064	2
+48849	3.679497	0.961466	1
+12285	3.795146	0.696694	2
+7826	2.531885	1.659173	2
+5565	9.733340	0.977746	2
+10346	6.093067	1.413798	2
+1823	7.712960	1.054927	2
+9744	11.470364	0.760461	3
+16857	2.886529	0.934416	2
+39336	10.054373	1.138351	3
+65230	9.972470	0.881876	1
+2463	2.335785	1.366145	2
+27353	11.375155	1.528626	3
+16191	0.000000	0.605619	2
+12258	4.126787	0.357501	2
+42377	6.319522	1.058602	1
+25607	8.680527	0.086955	3
+77450	14.856391	1.129823	1
+58732	2.454285	0.222380	1
+46426	7.292202	0.548607	3
+32688	8.745137	0.857348	3
+64890	8.579001	0.683048	1
+8554	2.507302	0.869177	2
+28861	11.415476	1.505466	3
+42050	4.838540	1.680892	1
+32193	10.339507	0.583646	3
+64895	6.573742	1.151433	1
+2355	6.539397	0.462065	2
+0	2.209159	0.723567	2
+70406	11.196378	0.836326	1
+57399	4.229595	0.128253	1
+41732	9.505944	0.005273	3
+11429	8.652725	1.348934	3
+75270	17.101108	0.490712	1
+5459	7.871839	0.717662	2
+73520	8.262131	1.361646	1
+40279	9.015635	1.658555	3
+21540	9.215351	0.806762	3
+17694	6.375007	0.033678	2
+22329	2.262014	1.022169	1
+46570	5.677110	0.709469	1
+42403	11.293017	0.207976	3
+33654	6.590043	1.353117	1
+9171	4.711960	0.194167	2
+28122	8.768099	1.108041	3
+34095	11.502519	0.545097	3
+1774	4.682812	0.578112	2
+40131	12.446578	0.300754	3
+13994	12.908384	1.657722	3
+77064	12.601108	0.974527	1
+11210	3.929456	0.025466	2
+6122	9.751503	1.182050	3
+15341	3.043767	0.888168	2
+44373	4.391522	0.807100	1
+28454	11.695276	0.679015	3
+63771	7.879742	0.154263	1
+9217	5.613163	0.933632	2
+69076	9.140172	0.851300	1
+24489	4.258644	0.206892	1
+16871	6.799831	1.221171	2
+39776	8.752758	0.484418	3
+5901	1.123033	1.180352	2
+40987	10.833248	1.585426	3
+7479	3.051618	0.026781	2
+38768	5.308409	0.030683	3
+4933	1.841792	0.028099	2
+32311	2.261978	1.605603	1
+26501	11.573696	1.061347	3
+37433	8.038764	1.083910	3
+23503	10.734007	0.103715	3
+68607	9.661909	0.350772	1
+27742	9.005850	0.548737	3
+11303	0.000000	0.539131	2
+0	5.757140	1.062373	2
+32729	9.164656	1.624565	3
+24619	1.318340	1.436243	1
+42414	14.075597	0.695934	3
+20210	10.107550	1.308398	3
+33225	7.960293	1.219760	3
+54483	6.317292	0.018209	1
+18475	12.664194	0.595653	3
+33926	2.906644	0.581657	1
+43865	2.388241	0.913938	1
+26547	6.024471	0.486215	3
+44404	7.226764	1.255329	3
+16674	4.183997	1.275290	2
+8123	11.850211	1.096981	3
+42747	11.661797	1.167935	3
+56054	3.574967	0.494666	1
+10933	0.000000	0.107475	2
+18121	7.937657	0.904799	3
+11272	3.365027	1.014085	2
+16297	0.000000	0.367491	2
+28168	13.860672	1.293270	3
+40963	10.306714	1.211594	3
+31685	7.228002	0.670670	3
+55164	4.508740	1.036192	1
+17595	0.366328	0.163652	2
+1862	3.299444	0.575152	2
+57087	0.573287	0.607915	1
+63082	9.183738	0.012280	1
+51213	7.842646	1.060636	3
+6487	4.750964	0.558240	2
+4805	11.438702	1.556334	3
+30302	8.243063	1.122768	3
+68680	7.949017	0.271865	1
+17591	7.875477	0.227085	2
+74391	9.569087	0.364856	1
+37217	7.750103	0.869094	3
+42814	0.000000	1.515293	1
+14738	3.396030	0.633977	2
+19896	11.916091	0.025294	3
+14673	0.460758	0.689586	2
+32011	13.087566	0.476002	3
+58736	4.589016	1.672600	1
+54744	8.397217	1.534103	1
+29482	5.562772	1.689388	1
+27698	10.905159	0.619091	3
+11443	1.311441	1.169887	2
+56117	10.647170	0.980141	3
+39514	0.000000	0.481918	1
+26627	8.503025	0.830861	3
+16525	0.436880	1.395314	2
+24368	6.127867	1.102179	1
+22160	12.112492	0.359680	3
+6030	1.264968	1.141582	2
+6468	6.067568	1.327047	2
+22945	8.010964	1.681648	3
+18520	3.791084	0.304072	2
+34914	11.773195	1.262621	3
+6121	8.339588	1.443357	2
+38063	2.563092	1.464013	1
+23410	5.954216	0.953782	1
+35073	9.288374	0.767318	3
+52914	3.976796	1.043109	1
+16801	8.585227	1.455708	3
+9533	1.271946	0.796506	2
+16721	0.000000	0.242778	2
+5832	0.000000	0.089749	2
+44591	11.521298	0.300860	3
+10143	1.139447	0.415373	2
+21609	5.699090	1.391892	2
+23817	2.449378	1.322560	1
+15640	0.000000	1.228380	2
+8847	3.168365	0.053993	2
+50939	10.428610	1.126257	3
+28521	2.943070	1.446816	1
+32901	10.441348	0.975283	3
+42850	12.478764	1.628726	3
+13499	5.856902	0.363883	2
+40345	2.476420	0.096075	1
+43547	1.826637	0.811457	1
+70758	4.324451	0.328235	1
+19780	1.376085	1.178359	2
+44484	5.342462	0.394527	1
+54462	11.835521	0.693301	3
+20085	12.423687	1.424264	3
+42291	12.161273	0.071131	3
+47550	8.148360	1.649194	3
+11938	1.531067	1.549756	2
+40699	3.200912	0.309679	1
+70908	8.862691	0.530506	1
+73989	6.370551	0.369350	1
+11872	2.468841	0.145060	2
+48463	11.054212	0.141508	3
+15987	2.037080	0.715243	2
+70036	13.364030	0.549972	1
+32967	10.249135	0.192735	3
+63249	10.464252	1.669767	1
+42795	9.424574	0.013725	3
+14459	4.458902	0.268444	2
+19973	0.000000	0.575976	2
+5494	9.686082	1.029808	3
+67902	13.649402	1.052618	1
+25621	13.181148	0.273014	3
+27545	3.877472	0.401600	1
+58656	1.413952	0.451380	1
+7327	4.248986	1.430249	2
+64555	8.779183	0.845947	1
+8998	4.156252	0.097109	2
+11752	5.580018	0.158401	2
+76319	15.040440	1.366898	1
+27665	12.793870	1.307323	3
+67417	3.254877	0.669546	1
+21808	10.725607	0.588588	3
+15326	8.256473	0.765891	2
+20057	8.033892	1.618562	3
+79341	10.702532	0.204792	1
+15636	5.062996	1.132555	2
+35602	10.772286	0.668721	3
+28544	1.892354	0.837028	1
+57663	1.019966	0.372320	1
+78727	15.546043	0.729742	1
+68255	11.638205	0.409125	1
+14964	3.427886	0.975616	2
+21835	11.246174	1.475586	3
+7487	0.000000	0.645045	2
+8700	0.000000	1.424017	2
+26226	8.242553	0.279069	3
+65899	8.700060	0.101807	1
+6543	0.812344	0.260334	2
+46556	2.448235	1.176829	1
+71038	13.230078	0.616147	1
+47657	0.236133	0.340840	1
+19600	11.155826	0.335131	3
+37422	11.029636	0.505769	3
+1363	2.901181	1.646633	2
+26535	3.924594	1.143120	1
+47707	2.524806	1.292848	1
+38055	3.527474	1.449158	1
+6286	3.384281	0.889268	2
+10747	0.000000	1.107592	2
+44883	11.898890	0.406441	3
+56823	3.529892	1.375844	1
+68086	11.442677	0.696919	1
+70242	10.308145	0.422722	1
+11409	8.540529	0.727373	2
+67671	7.156949	1.691682	1
+61238	0.720675	0.847574	1
+17774	0.229405	1.038603	2
+53376	3.399331	0.077501	1
+30930	6.157239	0.580133	1
+28987	1.239698	0.719989	1
+13655	6.036854	0.016548	2
+7227	5.258665	0.933722	2
+40409	12.393001	1.571281	3
+13605	9.627613	0.935842	2
+26400	11.130453	0.597610	3
+13491	8.842595	0.349768	3
+30232	10.690010	1.456595	3
+43253	5.714718	1.674780	3
+55536	3.052505	1.335804	1
+8807	0.000000	0.059025	2
+25783	9.945307	1.287952	3
+22812	2.719723	1.142148	1
+77826	11.154055	1.608486	1
+38172	2.687918	0.660836	1
+31676	10.037847	0.962245	3
+74038	12.404762	1.112080	1
+44738	10.237305	0.633422	3
+17410	4.745392	0.662520	2
+5688	4.639461	1.569431	2
+36642	3.149310	0.639669	1
+29956	13.406875	1.639194	3
+60350	6.068668	0.881241	1
+23758	9.477022	0.899002	3
+25780	3.897620	0.560201	2
+11342	5.463615	1.203677	2
+36109	3.369267	1.575043	1
+14292	5.234562	0.825954	2
+11160	0.000000	0.722170	2
+23762	12.979069	0.504068	3
+39567	5.376564	0.557476	1
+25647	13.527910	1.586732	3
+14814	2.196889	0.784587	2
+73590	10.691748	0.007509	1
+35187	1.659242	0.447066	1
+49459	8.369667	0.656697	3
+31657	13.157197	0.143248	3
+6259	8.199667	0.908508	2
+33101	4.441669	0.439381	3
+27107	9.846492	0.644523	3
+17824	0.019540	0.977949	2
+43536	8.253774	0.748700	3
+67705	6.038620	1.509646	1
+35283	6.091587	1.694641	3
+71308	8.986820	1.225165	1
+31054	11.508473	1.624296	3
+52387	8.807734	0.713922	3
+40328	0.000000	0.816676	1
+34844	8.889202	1.665414	3
+11607	3.178117	0.542752	2
+64306	7.013795	0.139909	1
+32721	9.605014	0.065254	3
+33170	1.230540	1.331674	1
+37192	10.412811	0.890803	3
+13089	0.000000	0.567161	2
+66491	9.699991	0.122011	1
+15941	0.000000	0.061191	2
+4272	4.455293	0.272135	2
+48812	3.020977	1.502803	1
+28818	8.099278	0.216317	3
+35394	1.157764	1.603217	1
+71791	10.105396	0.121067	1
+40668	11.230148	0.408603	3
+39580	9.070058	0.011379	3
+11786	0.566460	0.478837	2
+19251	0.000000	0.487300	2
+56594	8.956369	1.193484	3
+54495	1.523057	0.620528	1
+11844	2.749006	0.169855	2
+45465	9.235393	0.188350	3
+31033	10.555573	0.403927	3
+16633	6.956372	1.519308	2
+13887	0.636281	1.273984	2
+52603	3.574737	0.075163	1
+72000	9.032486	1.461809	1
+68497	5.958993	0.023012	1
+35135	2.435300	1.211744	1
+26397	10.539731	1.638248	3
+7313	7.646702	0.056513	2
+91273	20.919349	0.644571	1
+24743	1.424726	0.838447	1
+31690	6.748663	0.890223	3
+15432	2.289167	0.114881	2
+58394	5.548377	0.402238	1
+33962	6.057227	0.432666	1
+31442	10.828595	0.559955	3
+31044	11.318160	0.271094	3
+29938	13.265311	0.633903	3
+9875	0.000000	1.496715	2
+51542	6.517133	0.402519	3
+11878	4.934374	1.520028	2
+69241	10.151738	0.896433	1
+37776	2.425781	1.559467	1
+68997	9.778962	1.195498	1
+67416	12.219950	0.657677	1
+59225	7.394151	0.954434	1
+29138	8.518535	0.742546	3
+5962	2.798700	0.662632	2
+10847	0.637930	0.617373	2
+70527	10.750490	0.097415	1
+9610	0.625382	0.140969	2
+64734	10.027968	0.282787	1
+25941	9.817347	0.364197	3
+2763	0.646828	1.266069	2
+55601	3.347111	0.914294	1
+31128	11.816892	0.193798	3
+5181	0.000000	1.480198	2
+69982	10.945666	0.993219	1
+52440	10.244706	0.280539	3
+57350	2.579801	1.149172	1
+57869	2.630410	0.098869	1
+56557	11.746200	1.695517	3
+42342	8.104232	1.326277	3
+15560	12.409743	0.790295	3
+34826	12.167844	1.328086	3
+8569	3.198408	0.299287	2
+77623	16.055513	0.541052	1
+78184	7.138659	0.158481	1
+7036	4.831041	0.761419	2
+69616	10.082890	1.373611	1
+21546	10.066867	0.788470	3
+36715	8.129538	0.329913	3
+20522	3.012463	1.138108	2
+42349	3.720391	0.845974	1
+9037	0.773493	1.148256	2
+26728	10.962941	1.037324	3
+587	0.177621	0.162614	2
+48915	3.085853	0.967899	1
+9824	8.426781	0.202558	2
+4135	1.825927	1.128347	2
+9666	2.185155	1.010173	2
+59333	7.184595	1.261338	1
+36198	0.000000	0.116525	1
+34909	8.901752	1.033527	3
+47516	2.451497	1.358795	1
+55807	3.213631	0.432044	1
+14036	3.974739	0.723929	2
+42856	9.601306	0.619232	3
+64007	8.363897	0.445341	1
+59428	6.381484	1.365019	1
+13730	0.000000	1.403914	2
+41740	9.609836	1.438105	3
+63546	9.904741	0.985862	1
+30417	7.185807	1.489102	3
+69636	5.466703	1.216571	1
+64660	0.000000	0.915898	1
+14883	4.575443	0.535671	2
+7965	3.277076	1.010868	2
+68620	10.246623	1.239634	1
+8738	2.341735	1.060235	2
+7544	3.201046	0.498843	2
+6377	6.066013	0.120927	2
+36842	8.829379	0.895657	3
+81046	15.833048	1.568245	1
+67736	13.516711	1.220153	1
+32492	0.664284	1.116755	1
+39299	6.325139	0.605109	3
+77289	8.677499	0.344373	1
+33835	8.188005	0.964896	3
+71890	9.414263	0.384030	1
+32054	9.196547	1.138253	3
+38579	10.202968	0.452363	3
+55984	2.119439	1.481661	1
+72694	13.635078	0.858314	1
+42299	0.083443	0.701669	1
+26635	9.149096	1.051446	3
+8579	1.933803	1.374388	2
+37302	14.115544	0.676198	3
+22878	8.933736	0.943352	3
+4364	2.661254	0.946117	2
+4985	0.988432	1.305027	2
+37068	2.063741	1.125946	1
+41137	2.220590	0.690754	1
+67759	6.424849	0.806641	1
+11831	1.156153	1.613674	2
+34502	3.032720	0.601847	1
+4088	3.076828	0.952089	2
+15199	0.000000	0.318105	2
+17309	7.750480	0.554015	3
+42816	10.958135	1.482500	3
+43751	10.222018	0.488678	3
+58335	2.367988	0.435741	1
+75039	7.686054	1.381455	1
+42878	11.464879	1.481589	3
+42770	11.075735	0.089726	3
+8848	3.543989	0.345853	2
+31340	8.123889	1.282880	3
+41413	4.331769	0.754467	3
+12731	0.120865	1.211961	2
+22447	6.116109	0.701523	3
+33564	7.474534	0.505790	3
+48907	8.819454	0.649292	3
+8762	6.802144	0.615284	2
+46696	12.666325	0.931960	3
+36851	8.636180	0.399333	3
+67639	11.730991	1.289833	1
+171	8.132449	0.039062	2
+26674	10.296589	1.496144	3
+8739	7.583906	1.005764	2
+66668	9.777806	0.496377	1
+68732	8.833546	0.513876	1
+69995	4.907899	1.518036	1
+82008	8.362736	1.285939	1
+25054	9.084726	1.606312	3
+33085	14.164141	0.560970	3
+41379	9.080683	0.989920	3
+39417	6.522767	0.038548	3
+12556	3.690342	0.462281	2
+39432	3.563706	0.242019	1
+38010	1.065870	1.141569	1
+69306	6.683796	1.456317	1
+38000	1.712874	0.243945	1
+46321	13.109929	1.280111	3
+66293	11.327910	0.780977	1
+22730	4.545711	1.233254	1
+5952	3.367889	0.468104	2
+72308	8.326224	0.567347	1
+60338	8.978339	1.442034	1
+13301	5.655826	1.582159	2
+27884	8.855312	0.570684	3
+11188	6.649568	0.544233	2
+56796	3.966325	0.850410	1
+8571	1.924045	1.664782	2
+4914	6.004812	0.280369	2
+10784	0.000000	0.375849	2
+39296	9.923018	0.092192	3
+13113	2.389084	0.119284	2
+70204	13.663189	0.133251	1
+46813	11.434976	0.321216	3
+11697	0.358270	1.292858	2
+44183	9.598873	0.223524	3
+2225	6.375275	0.608040	2
+29066	11.580532	0.458401	3
+4245	5.319324	1.598070	2
+34379	4.324031	1.603481	1
+44441	2.358370	1.273204	1
+2022	0.000000	1.182708	2
+26866	12.824376	0.890411	3
+57070	1.587247	1.456982	1
+32932	8.510324	1.520683	3
+51967	10.428884	1.187734	3
+44432	8.346618	0.042318	3
+67066	7.541444	0.809226	1
+17262	2.540946	1.583286	2
+79728	9.473047	0.692513	1
+14259	0.352284	0.474080	2
+6122	0.000000	0.589826	2
+76879	12.405171	0.567201	1
+11426	4.126775	0.871452	2
+2493	0.034087	0.335848	2
+19910	1.177634	0.075106	2
+10939	0.000000	0.479996	2
+17716	0.994909	0.611135	2
+31390	11.053664	1.180117	3
+20375	0.000000	1.679729	2
+26309	2.495011	1.459589	1
+33484	11.516831	0.001156	3
+45944	9.213215	0.797743	3
+4249	5.332865	0.109288	2
+6089	0.000000	1.689771	2
+7513	0.000000	1.126053	2
+27862	12.640062	1.690903	3
+39038	2.693142	1.317518	1
+19218	3.328969	0.268271	2
+62911	7.193166	1.117456	1
+77758	6.615512	1.521012	1
+27940	8.000567	0.835341	3
+2194	4.017541	0.512104	2
+37072	13.245859	0.927465	3
+15585	5.970616	0.813624	2
+25577	11.668719	0.886902	3
+8777	4.283237	1.272728	2
+29016	10.742963	0.971401	3
+21910	12.326672	1.592608	3
+12916	0.000000	0.344622	2
+10976	0.000000	0.922846	2
+79065	10.602095	0.573686	1
+36759	10.861859	1.155054	3
+50011	1.229094	1.638690	1
+1155	0.410392	1.313401	2
+71600	14.552711	0.616162	1
+30817	14.178043	0.616313	3
+54559	14.136260	0.362388	1
+29764	0.093534	1.207194	1
+69100	10.929021	0.403110	1
+47324	11.432919	0.825959	3
+73199	9.134527	0.586846	1
+44461	5.071432	1.421420	1
+45617	11.460254	1.541749	3
+28221	11.620039	1.103553	3
+7091	4.022079	0.207307	2
+6110	3.057842	1.631262	2
+79016	7.782169	0.404385	1
+18289	7.981741	0.929789	3
+43679	4.601363	0.268326	1
+22075	2.595564	1.115375	1
+23535	10.049077	0.391045	3
+25301	3.265444	1.572970	2
+32256	11.780282	1.511014	3
+36951	3.075975	0.286284	1
+31290	1.795307	0.194343	1
+38953	11.106979	0.202415	3
+35257	5.994413	0.800021	1
+25847	9.706062	1.012182	3
+32680	10.582992	0.836025	3
+62018	7.038266	1.458979	1
+9074	0.023771	0.015314	2
+33004	12.823982	0.676371	3
+44588	3.617770	0.493483	1
+32565	8.346684	0.253317	3
+38563	6.104317	0.099207	1
+75668	16.207776	0.584973	1
+9069	6.401969	1.691873	2
+53395	2.298696	0.559757	1
+28631	7.661515	0.055981	3
+71036	6.353608	1.645301	1
+71142	10.442780	0.335870	1
+37653	3.834509	1.346121	1
+76839	10.998587	0.584555	1
+9916	2.695935	1.512111	2
+38889	3.356646	0.324230	1
+39075	14.677836	0.793183	3
+48071	1.551934	0.130902	1
+7275	2.464739	0.223502	2
+41804	1.533216	1.007481	1
+35665	12.473921	0.162910	3
+67956	6.491596	0.032576	1
+41892	10.506276	1.510747	3
+38844	4.380388	0.748506	1
+74197	13.670988	1.687944	1
+14201	8.317599	0.390409	2
+3908	0.000000	0.556245	2
+2459	0.000000	0.290218	2
+32027	10.095799	1.188148	3
+12870	0.860695	1.482632	2
+9880	1.557564	0.711278	2
+72784	10.072779	0.756030	1
+17521	0.000000	0.431468	2
+50283	7.140817	0.883813	3
+33536	11.384548	1.438307	3
+9452	3.214568	1.083536	2
+37457	11.720655	0.301636	3
+17724	6.374475	1.475925	3
+43869	5.749684	0.198875	3
+264	3.871808	0.552602	2
+25736	8.336309	0.636238	3
+39584	9.710442	1.503735	3
+31246	1.532611	1.433898	1
+49567	9.785785	0.984614	3
+7052	2.633627	1.097866	2
+35493	9.238935	0.494701	3
+10986	1.205656	1.398803	2
+49508	3.124909	1.670121	1
+5734	7.935489	1.585044	2
+65479	12.746636	1.560352	1
+77268	10.732563	0.545321	1
+28490	3.977403	0.766103	1
+13546	4.194426	0.450663	2
+37166	9.610286	0.142912	3
+16381	4.797555	1.260455	2
+10848	1.615279	0.093002	2
+35405	4.614771	1.027105	1
+15917	0.000000	1.369726	2
+6131	0.608457	0.512220	2
+67432	6.558239	0.667579	1
+30354	12.315116	0.197068	3
+69696	7.014973	1.494616	1
+33481	8.822304	1.194177	3
+43075	10.086796	0.570455	3
+38343	7.241614	1.661627	3
+14318	4.602395	1.511768	2
+5367	7.434921	0.079792	2
+37894	10.467570	1.595418	3
+36172	9.948127	0.003663	3
+40123	2.478529	1.568987	1
+10976	5.938545	0.878540	2
+12705	0.000000	0.948004	2
+12495	5.559181	1.357926	2
+35681	9.776654	0.535966	3
+46202	3.092056	0.490906	1
+11505	0.000000	1.623311	2
+22834	4.459495	0.538867	1
+49901	8.334306	1.646600	3
+71932	11.226654	0.384686	1
+13279	3.904737	1.597294	2
+49112	7.038205	1.211329	3
+77129	9.836120	1.054340	1
+37447	1.990976	0.378081	1
+62397	9.005302	0.485385	1
+0	1.772510	1.039873	2
+15476	0.458674	0.819560	2
+40625	10.003919	0.231658	3
+36706	0.520807	1.476008	1
+28580	10.678214	1.431837	3
+25862	4.425992	1.363842	1
+63488	12.035355	0.831222	1
+33944	10.606732	1.253858	3
+30099	1.568653	0.684264	1
+13725	2.545434	0.024271	2
+36768	10.264062	0.982593	3
+64656	9.866276	0.685218	1
+14927	0.142704	0.057455	2
+43231	9.853270	1.521432	3
+66087	6.596604	1.653574	1
+19806	2.602287	1.321481	2
+41081	10.411776	0.664168	3
+10277	7.083449	0.622589	2
+7014	2.080068	1.254441	2
+17275	0.522844	1.622458	2
+31600	10.362000	1.544827	3
+59956	3.412967	1.035410	1
+42181	6.796548	1.112153	3
+51743	4.092035	0.075804	1
+5194	2.763811	1.564325	2
+30832	12.547439	1.402443	3
+7976	5.708052	1.596152	2
+14602	4.558025	0.375806	2
+41571	11.642307	0.438553	3
+55028	3.222443	0.121399	1
+5837	4.736156	0.029871	2
+39808	10.839526	0.836323	3
+20944	4.194791	0.235483	2
+22146	14.936259	0.888582	3
+42169	3.310699	1.521855	1
+7010	2.971931	0.034321	2
+3807	9.261667	0.537807	2
+29241	7.791833	1.111416	3
+52696	1.480470	1.028750	1
+42545	3.677287	0.244167	1
+24437	2.202967	1.370399	1
+16037	5.796735	0.935893	2
+8493	3.063333	0.144089	2
+68080	11.233094	0.492487	1
+59016	1.965570	0.005697	1
+11810	8.616719	0.137419	2
+68630	6.609989	1.083505	1
+7629	1.712639	1.086297	2
+71992	10.117445	1.299319	1
+13398	0.000000	1.104178	2
+26241	9.824777	1.346821	3
+11160	1.653089	0.980949	2
+76701	18.178822	1.473671	1
+32174	6.781126	0.885340	3
+45043	8.206750	1.549223	3
+42173	10.081853	1.376745	3
+69801	6.288742	0.112799	1
+41737	3.695937	1.543589	1
+46979	6.726151	1.069380	3
+79267	12.969999	1.568223	1
+4615	2.661390	1.531933	2
+32907	7.072764	1.117386	3
+37444	9.123366	1.318988	3
+569	3.743946	1.039546	2
+8723	2.341300	0.219361	2
+6024	0.541913	0.592348	2
+52252	2.310828	1.436753	1
+8358	6.226597	1.427316	2
+26166	7.277876	0.489252	3
+18471	0.000000	0.389459	2
+3386	7.218221	1.098828	2
+41544	8.777129	1.111464	3
+10480	2.813428	0.819419	2
+5894	2.268766	1.412130	2
+7273	6.283627	0.571292	2
+22272	7.520081	1.626868	3
+31369	11.739225	0.027138	3
+10708	3.746883	0.877350	2
+69364	12.089835	0.521631	1
+37760	12.310404	0.259339	3
+13004	0.000000	0.671355	2
+37885	2.728800	0.331502	1
+52555	10.814342	0.607652	3
+38997	12.170268	0.844205	3
+69698	6.698371	0.240084	1
+11783	3.632672	1.643479	2
+47636	10.059991	0.892361	3
+15744	1.887674	0.756162	2
+69058	8.229125	0.195886	1
+33057	7.817082	0.476102	3
+28681	12.277230	0.076805	3
+34042	10.055337	1.115778	3
+29928	3.596002	1.485952	1
+9734	2.755530	1.420655	2
+7344	7.780991	0.513048	2
+7387	0.093705	0.391834	2
+33957	8.481567	0.520078	3
+9936	3.865584	0.110062	2
+36094	9.683709	0.779984	3
+39835	10.617255	1.359970	3
+64486	7.203216	1.624762	1
+0	7.601414	1.215605	2
+39539	1.386107	1.417070	1
+66972	9.129253	0.594089	1
+15029	1.363447	0.620841	2
+44909	3.181399	0.359329	1
+38183	13.365414	0.217011	3
+37372	4.207717	1.289767	1
+0	4.088395	0.870075	2
+17786	3.327371	1.142505	2
+39055	1.303323	1.235650	1
+37045	7.999279	1.581763	3
+6435	2.217488	0.864536	2
+72265	7.751808	0.192451	1
+28152	14.149305	1.591532	3
+25931	8.765721	0.152808	3
+7538	3.408996	0.184896	2
+1315	1.251021	0.112340	2
+12292	6.160619	1.537165	2
+49248	1.034538	1.585162	1
+9025	0.000000	1.034635	2
+13438	2.355051	0.542603	2
+69683	6.614543	0.153771	1
+25374	10.245062	1.450903	3
+55264	3.467074	1.231019	1
+38324	7.487678	1.572293	3
+69643	4.624115	1.185192	1
+44058	8.995957	1.436479	3
+41316	11.564476	0.007195	3
+29119	3.440948	0.078331	1
+51656	1.673603	0.732746	1
+3030	4.719341	0.699755	2
+35695	10.304798	1.576488	3
+1537	2.086915	1.199312	2
+9083	6.338220	1.131305	2
+47744	8.254926	0.710694	3
+71372	16.067108	0.974142	1
+37980	1.723201	0.310488	1
+42385	3.785045	0.876904	1
+22687	2.557561	0.123738	1
+39512	9.852220	1.095171	3
+11885	3.679147	1.557205	2
+4944	9.789681	0.852971	2
+73230	14.958998	0.526707	1
+17585	11.182148	1.288459	3
+68737	7.528533	1.657487	1
+13818	5.253802	1.378603	2
+31662	13.946752	1.426657	3
+86686	15.557263	1.430029	1
+43214	12.483550	0.688513	3
+24091	2.317302	1.411137	1
+52544	10.069724	0.766119	3
+61861	5.792231	1.615483	1
+47903	4.138435	0.475994	1
+37190	12.929517	0.304378	3
+6013	9.378238	0.307392	2
+27223	8.361362	1.643204	3
+69027	7.939406	1.325042	1
+78642	10.735384	0.705788	1
+30254	11.592723	0.286188	3
+21704	10.098356	0.704748	3
+34985	9.299025	0.545337	3
+31316	11.158297	0.218067	3
+76368	16.143900	0.558388	1
+27953	10.971700	1.221787	3
+152	0.000000	0.681478	2
+9146	3.178961	1.292692	2
+75346	17.625350	0.339926	1
+26376	1.995833	0.267826	1
+35255	10.640467	0.416181	3
+19198	9.628339	0.985462	3
+12518	4.662664	0.495403	2
+25453	5.754047	1.382742	2
+12530	0.000000	0.037146	2
+62230	9.334332	0.198118	1
+9517	3.846162	0.619968	2
+71161	10.685084	0.678179	1
+1593	4.752134	0.359205	2
+33794	0.697630	0.966786	1
+39710	10.365836	0.505898	3
+16941	0.461478	0.352865	2
+69209	11.339537	1.068740	1
+4446	5.420280	0.127310	2
+9347	3.469955	1.619947	2
+55635	8.517067	0.994858	3
+65889	8.306512	0.413690	1
+10753	2.628690	0.444320	2
+7055	0.000000	0.802985	2
+7905	0.000000	1.170397	2
+53447	7.298767	1.582346	3
+9194	7.331319	1.277988	2
+61914	9.392269	0.151617	1
+15630	5.541201	1.180596	2
+79194	15.149460	0.537540	1
+12268	5.515189	0.250562	2
+33682	7.728898	0.920494	3
+26080	11.318785	1.510979	3
+19119	3.574709	1.531514	2
+30902	7.350965	0.026332	3
+63039	7.122363	1.630177	1
+51136	1.828412	1.013702	1
+35262	10.117989	1.156862	3
+42776	11.309897	0.086291	3
+64191	8.342034	1.388569	1
+15436	0.241714	0.715577	2
+14402	10.482619	1.694972	2
+6341	9.289510	1.428879	2
+14113	4.269419	0.134181	2
+6390	0.000000	0.189456	2
+8794	0.817119	0.143668	2
+43432	1.508394	0.652651	1
+38334	9.359918	0.052262	3
+34068	10.052333	0.550423	3
+30819	11.111660	0.989159	3
+22239	11.265971	0.724054	3
+28725	10.383830	0.254836	3
+57071	3.878569	1.377983	1
+72420	13.679237	0.025346	1
+28294	10.526846	0.781569	3
+9896	0.000000	0.924198	2
+65821	4.106727	1.085669	1
+7645	8.118856	1.470686	2
+71289	7.796874	0.052336	1
+5128	2.789669	1.093070	2
+13711	6.226962	0.287251	2
+22240	10.169548	1.660104	3
+15092	0.000000	1.370549	2
+5017	7.513353	0.137348	2
+10141	8.240793	0.099735	2
+35570	14.612797	1.247390	3
+46893	3.562976	0.445386	1
+8178	3.230482	1.331698	2
+55783	3.612548	1.551911	1
+1148	0.000000	0.332365	2
+10062	3.931299	0.487577	2
+74124	14.752342	1.155160	1
+66603	10.261887	1.628085	1
+11893	2.787266	1.570402	2
+50908	15.112319	1.324132	3
+39891	5.184553	0.223382	3
+65915	3.868359	0.128078	1
+65678	3.507965	0.028904	1
+62996	11.019254	0.427554	1
+36851	3.812387	0.655245	1
+36669	11.056784	0.378725	3
+38876	8.826880	1.002328	3
+26878	11.173861	1.478244	3
+46246	11.506465	0.421993	3
+12761	7.798138	0.147917	3
+35282	10.155081	1.370039	3
+68306	10.645275	0.693453	1
+31262	9.663200	1.521541	3
+34754	10.790404	1.312679	3
+13408	2.810534	0.219962	2
+30365	9.825999	1.388500	3
+10709	1.421316	0.677603	2
+24332	11.123219	0.809107	3
+45517	13.402206	0.661524	3
+6178	1.212255	0.836807	2
+10639	1.568446	1.297469	2
+29613	3.343473	1.312266	1
+22392	5.400155	0.193494	1
+51126	3.818754	0.590905	1
+53644	7.973845	0.307364	3
+51417	9.078824	0.734876	3
+24859	0.153467	0.766619	1
+61732	8.325167	0.028479	1
+71128	7.092089	1.216733	1
+27276	5.192485	1.094409	3
+30453	10.340791	1.087721	3
+18670	2.077169	1.019775	2
+70600	10.151966	0.993105	1
+12683	0.046826	0.809614	2
+81597	11.221874	1.395015	1
+69959	14.497963	1.019254	1
+8124	3.554508	0.533462	2
+18867	3.522673	0.086725	2
+80886	14.531655	0.380172	1
+55895	3.027528	0.885457	1
+31587	1.845967	0.488985	1
+10591	10.226164	0.804403	3
+70096	10.965926	1.212328	1
+53151	2.129921	1.477378	1
+11992	0.000000	1.606849	2
+33114	9.489005	0.827814	3
+7413	0.000000	1.020797	2
+10583	0.000000	1.270167	2
+58668	6.556676	0.055183	1
+35018	9.959588	0.060020	3
+70843	7.436056	1.479856	1
+14011	0.404888	0.459517	2
+35015	9.952942	1.650279	3
+70839	15.600252	0.021935	1
+3024	2.723846	0.387455	2
+5526	0.513866	1.323448	2
+5113	0.000000	0.861859	2
+20851	7.280602	1.438470	2
+40999	9.161978	1.110180	3
+15823	0.991725	0.730979	2
+35432	7.398380	0.684218	3
+53711	12.149747	1.389088	3
+64371	9.149678	0.874905	1
+9289	9.666576	1.370330	2
+60613	3.620110	0.287767	1
+18338	5.238800	1.253646	2
+22845	14.715782	1.503758	3
+74676	14.445740	1.211160	1
+34143	13.609528	0.364240	3
+14153	3.141585	0.424280	2
+9327	0.000000	0.120947	2
+18991	0.454750	1.033280	2
+9193	0.510310	0.016395	2
+2285	3.864171	0.616349	2
+9493	6.724021	0.563044	2
+2371	4.289375	0.012563	2
+13963	0.000000	1.437030	2
+2299	3.733617	0.698269	2
+5262	2.002589	1.380184	2
+4659	2.502627	0.184223	2
+17582	6.382129	0.876581	2
+27750	8.546741	0.128706	3
+9868	2.694977	0.432818	2
+18333	3.951256	0.333300	2
+3780	9.856183	0.329181	2
+18190	2.068962	0.429927	2
+11145	3.410627	0.631838	2
+68846	9.974715	0.669787	1
+26575	10.650102	0.866627	3
+48111	9.134528	0.728045	3
+43757	7.882601	1.332446	3
Index: 02_kNN/DatingTest/createData.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 02_kNN/DatingTest/createData.py	(date 1564562271682)
+++ 02_kNN/DatingTest/createData.py	(date 1564562271682)
@@ -0,0 +1,38 @@
+#!/usr/bin/python3.7
+# -*- coding: utf-8 -*-
+"""
+@Time     :2019/7/31 16:11
+
+@Author   :Yuki
+
+@FileName :createData.py
+
+@E-mail   :fujii20180311@foxmail.com
+"""
+
+import matplotlib.pyplot as plt
+import numpy as np
+import numpy
+
+
+def file2matric(file):
+    fr = open(file)
+    arrayOfLines = fr.readlines()
+    numberOfLines = len(arrayOfLines)
+    returnMat = np.zeros((numberOfLines, 3))
+    classLabelVector = []
+    index = 0
+    for line in arrayOfLines:
+        line = line.strip()
+        lineFromLine = line.split("\t")
+        returnMat[index, :] = lineFromLine[0: 3]
+        classLabelVector.append(int(lineFromLine[3]))
+        index += 1
+    return returnMat, classLabelVector
+
+
+fig = plt.figure()
+ax = fig.add_subplot(111)
+datingDataMat, datingLabels = file2matric('./datingTestSet2.txt')
+ax.scatter(datingDataMat[:, 1], datingDataMat[:, 2], 15.0 * np.array(datingLabels), 15.0 * np.array(datingLabels))
+plt.show()
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(date 1566004779261)
+++ .idea/vcs.xml	(date 1566004779261)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/spam/4.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/spam/4.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/spam/4.txt	(date 1551675378000)
@@ -0,0 +1,4 @@
+Percocet 10/625 mg withoutPrescription 30 tabs - $225!
+Percocet, a narcotic analgesic, is used to treat moderate to moderately SeverePain
+Top Quality, EXPRESS Shipping, 100% Safe & Discreet & Private.
+Buy Cheap Percocet Online
\ No newline at end of file
Index: .idea/Machine Learn.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/Machine Learn.iml	(date 1565154247771)
+++ .idea/Machine Learn.iml	(date 1565154247771)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+  <component name="TestRunnerService">
+    <option name="projectConfiguration" value="pytest" />
+    <option name="PROJECT_TEST_RUNNER" value="pytest" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(date 1565154247819)
+++ .idea/misc.xml	(date 1565154247819)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.7" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/modules.xml	(date 1565154247840)
+++ .idea/modules.xml	(date 1565154247840)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/Machine Learn.iml" filepath="$PROJECT_DIR$/.idea/Machine Learn.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: 02_kNN/海伦约会/kNN_test02.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 02_kNN/海伦约会/kNN_test02.py	(date 1565506018898)
+++ 02_kNN/海伦约会/kNN_test02.py	(date 1565506018898)
@@ -0,0 +1,208 @@
+#!/usr/bin/python3.7
+# -*- coding: utf-8 -*-
+import numpy as np
+import matplotlib.lines as mlines
+import matplotlib.pyplot as plt
+import operator
+import sklearn
+"""
+@Time     :2019/8/7 14:05
+
+@Author   :Yuki
+
+@FileName :kNN_test02.py
+
+@E-mail   :fujii20180311@foxmail.com
+"""
+
+def classify0(inX, dataSet, labels, k):
+    #numpy函数shape[0]返回dataSet的行数
+    dataSetSize = dataSet.shape[0]
+    #在列向量方向上重复inX共1次(横向)，行向量方向上重复inX共dataSetSize次(纵向)
+    diffMat = np.tile(inX, (dataSetSize, 1)) - dataSet
+    #二维特征相减后平方
+    sqDiffMat = diffMat**2
+    #sum()所有元素相加，sum(0)列相加，sum(1)行相加
+    sqDistances = sqDiffMat.sum(axis=1)
+    #开方，计算出距离
+    distances = sqDistances**0.5
+    #返回distances中元素从小到大排序后的索引值
+    sortedDistIndices = distances.argsort()
+    #定一个记录类别次数的字典
+    classCount = {}
+    for i in range(k):
+        #取出前k个元素的类别
+        voteIlabel = labels[sortedDistIndices[i]]
+        #dict.get(key,default=None),字典的get()方法,返回指定键的值,如果值不在字典中返回默认值。
+        #计算类别次数
+        classCount[voteIlabel] = classCount.get(voteIlabel, 0) + 1
+    #python3中用items()替换python2中的iteritems()
+    #key=operator.itemgetter(1)根据字典的值进行排序
+    #key=operator.itemgetter(0)根据字典的键进行排序
+    #reverse降序排序字典
+    sortedClassCount = sorted(classCount.items(),key=operator.itemgetter(1), reverse=True)
+    #返回次数最多的类别,即所要分类的类别
+    return sortedClassCount[0][0]
+'''
+函数说明：打开并解析文件，并对数据进行分类
+
+Parameters：
+    filename：文件名
+
+Returns：
+    returnMat：特征矩阵
+    classLabelVector：标签的分类
+'''
+def file2Matrix(filename):
+    #打开文件
+    fr = open(filename)
+    #读入文件所有行内容
+    arrayOLines = fr.readlines()
+    #获取数据行数
+    numberOfLines = len(arrayOLines)
+    #返回ndarray矩阵，numberOfLines行，3列，填充0
+    returnMat = np.zeros((numberOfLines, 3))
+    #记录标签类型
+    classLabelVector = []
+    #行索引
+    index = 0
+    for line in arrayOLines:
+        #默认删除字符串首和尾的空白字符，'\n','\t','\r',' '等
+        line = line.strip()
+        #使用\t对字符串进行分片
+        listFromLine = line.split('\t')
+        #取出listFromLine的前3行存入returnMat的一行中
+        returnMat[index, :] = listFromLine[0: 3]
+        #记录数据标签
+        classLabelVector.append(int(listFromLine[-1]))
+        index += 1
+    return returnMat, classLabelVector
+'''
+函数说明：对数据进行归一化处理
+
+Parameters:
+    dataset:特征矩阵
+
+Return:
+    normalDataSet:归一化的特征矩阵
+    ranges:数据范围
+    minVals:数据最小值
+'''
+def autoNorm(dataSet):
+    #获取数据案列算出最小最大值
+    minVals = dataSet.min(0)
+    maxVals = dataSet.max(0)
+    #算出最大值和最小值的范围
+    ranges  = maxVals-minVals
+    #以dataSet数组形状创建一个值都为0的数组
+    normalDataSet = np.zeros(dataSet.shape)
+    #返回dataSet的行数
+    m = dataSet.shape[0]
+    #原始值减去最小值
+    normalDataSet = dataSet-np.tile(minVals, (m, 1))
+    #差值除以数据值范围
+    normalDataSet = normalDataSet / np.tile(ranges, (m, 1))
+    return normalDataSet, ranges, minVals
+
+
+'''
+函数说明：数据可视化
+
+Parameters:
+    datingDataMat:特征矩阵
+    datingLabels:分类Label
+
+Returns:
+    无
+'''
+def showdatas(datingDataMat, datingLabels):
+    #将画布分成2行2列，画布大小为(13, 8),不共享x轴和y轴
+    fig, axs = plt.subplots(nrows=2, ncols=2, sharex=False, sharey=False, figsize=(13, 8))
+    #获取标签行数
+    # numberOfLabels = len(datingLabels)
+    labelsColors = []
+    for i in datingLabels:
+        if i == 1:
+            labelsColors.append('black')
+        elif i == 2:
+            labelsColors.append('orange')
+        else:
+            labelsColors.append('red')
+    #画出散点图，以datingDataMat的第一列（飞行里程），第二列（玩游戏）数据画散点图，散点大小为15，透明度0.5
+    axs[0][0].scatter(x=datingDataMat[:, 0], y=datingDataMat[:, 1], color=labelsColors, s=15, alpha=0.5)
+    #设置标题，x轴label，y轴label
+    axs0_title_text = axs[0][0].set_title(u'每年获得的飞行常客里程数和玩视频游所消耗时间百分比', fontproperties='SimHei')
+    axs0_xlabel_text = axs[0][0].set_xlabel(u'每年获得的飞行常客里程数', fontproperties='SimHei')
+    axs0_ylabel_text = axs[0][0].set_ylabel(u'玩视频游戏所消耗时间占比', fontproperties='SimHei')
+    d = dict(size=12, weight='bold', color='pink')
+    plt.setp(axs0_title_text, **d)
+    plt.setp(axs0_xlabel_text, size=12, weight='bold', color='black')
+    plt.setp(axs0_ylabel_text, size=12, weight='bold', color='black')
+
+    #画出散点图，以datingDataMat的第一列（飞行里程），第三列（冰激凌）数据画散点图，散点大小为15，透明度0.5
+    axs[0][1].scatter(x=datingDataMat[:, 0], y=datingDataMat[:, 2], color=labelsColors, s=15, alpha=0.5)
+    #设置标题，x轴label，y轴label
+    axs1_title_text = axs[0][1].set_title(u'每年获得的飞行常客里程数和每周消费的冰激凌公升数', fontproperties='SimHei')
+    axs1_xlabel_text = axs[0][1].set_xlabel(u'每年获得的飞行常客里程数', fontproperties='SimHei')
+    axs1_ylabel_text = axs[0][1].set_ylabel(u'每周消费的冰激凌公升数', fontproperties='SimHei')
+    plt.setp(axs1_title_text, size=12, weight='bold', color='red')
+    plt.setp(axs1_xlabel_text, size=12, weight='bold', color='black')
+    plt.setp(axs1_ylabel_text, size=12, weight='bold', color='black')
+
+    #画出散点图，以datingDataMat的第二列（游戏），第三列（冰激凌）数据画散点图，散点大小为15，透明度0.5
+    axs[1][0].scatter(x=datingDataMat[:, 1], y=datingDataMat[:, 2], color=labelsColors, s=15, alpha=0.5)
+    #设置标题，x轴label，y轴label
+    axs2_title_text = axs[1][0].set_title(u'玩视频游戏所耗时间占比和每周消费的冰激凌公升数', fontproperties='SimHei')
+    axs2_xlabel_text = axs[1][0].set_xlabel(u'玩视频游戏所耗时间占比', fontproperties='SimHei')
+    axs2_ylabel_text = axs[1][0].set_ylabel(u'每周消费的冰激凌公升数', fontproperties='SimHei')
+    plt.setp(axs2_title_text, size=12, weight='bold', color='red')
+    plt.setp(axs2_xlabel_text, size=12, weight='bold', color='black')
+    plt.setp(axs2_ylabel_text, size=12, weight='bold', color='black')
+
+    #设置图例
+    didntLike = mlines.Line2D([], [], color='black', marker='.', markersize=6, label='didntLike')
+    smallDoses = mlines.Line2D([], [], color='orange', marker='.', markersize=6, label='smallDoses')
+    largeDoses = mlines.Line2D([], [], color='red', marker='.', markersize=6, label='largeDoses')
+    #添加图例
+    axs[0][0].legend(handles=[didntLike, smallDoses, largeDoses])
+    axs[0][1].legend(handles=[didntLike, smallDoses, largeDoses])
+    axs[1][0].legend(handles=[didntLike, smallDoses, largeDoses])
+    # handles, labels = axs[0][0].get_legend_handles_labels()
+    # print(handles)
+    plt.show()
+'''
+函数说明:分类器测试函数
+
+Parameters:
+    fileName:文件名
+
+Returns:
+    无
+'''
+def datingClassTest(fileName):
+    #调用file2Matrix()得到返回的特征数据和标签
+    datingDataMat, datingLabels = file2Matrix(fileName)
+    #取出所有数据的前10%
+    hoRatio = 0.1
+    #数据归一化
+    normMat, ranges, minVals = autoNorm(datingDataMat)
+    #获取归一化特征矩阵的行数
+    m = normMat.shape[0]
+    #10%的测试数据
+    numTestVecs = int(m * hoRatio)
+    #分类错误计数
+    errorCount = 0.0
+    for i in range(numTestVecs):
+        #前numTestVecs个数据作为测试集，后m-numTestVecs作为个数据作为训练集
+        classifierResult = classify0(normMat[i, :], normMat[numTestVecs:, :], datingLabels[numTestVecs:], 4)
+        print("分类类型:%d\t真实类型:%d" %(classifierResult, datingLabels[i]))
+        if classifierResult != datingLabels[i]:
+            errorCount += 1
+    print("分类的正确率为:%.2f%%" % ((m-errorCount)/m*100))
+    return
+if __name__ == '__main__':
+    datingDataMat, datingLabels = file2Matrix("./datingTestSet2.txt")
+    showdatas(datingDataMat, datingLabels)
+
+
+
Index: 04_Naive Bayesian Model/email Filter/spam/16.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/spam/16.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/spam/16.txt	(date 1551675378000)
@@ -0,0 +1,11 @@
+You Have Everything To Gain!
+
+Incredib1e gains in length of 3-4 inches to yourPenis, PERMANANTLY
+
+Amazing increase in thickness of yourPenis, up to 30%
+BetterEjacu1ation control
+Experience Rock-HardErecetions
+Explosive, intenseOrgasns
+Increase volume ofEjacu1ate
+Doctor designed and endorsed
+100% herbal, 100% Natural, 100% Safe
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/spam/17.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/spam/17.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/spam/17.txt	(date 1551675378000)
@@ -0,0 +1,14 @@
+A home based business opportunity is knocking at your door.
+
+Don�t be rude and let this chance go by.
+
+You can earn a great income and find
+your financial life transformed.
+
+Learn more Here.
+
+
+
+To Your Success.
+
+Work From Home Finder Experts
\ No newline at end of file
Index: 03_Decision Trees/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 03_Decision Trees/__init__.py	(date 1565510655491)
+++ 03_Decision Trees/__init__.py	(date 1565510655491)
@@ -0,0 +1,86 @@
+# -*- coding: UTF-8 -*-
+from sklearn.preprocessing import LabelEncoder, OneHotEncoder
+from sklearn.externals.six import StringIO
+from sklearn import tree
+import pandas as pd
+import pydotplus
+import os
+#帮助python找到Graphviz
+os.environ["PATH"] += os.pathsep + 'D:/user/Program Files/Graphviz/bin'
+if __name__ == '__main__':
+    with open('lenses.txt', 'r') as fr:                                        #加载文件
+        lenses = [inst.strip().split('\t') for inst in fr.readlines()]        #处理文件
+    lenses_target = []                                                        #提取每组数据的类别，保存在列表里
+    for each in lenses:
+        lenses_target.append(each[-1])
+    print(lenses_target)
+
+    lensesLabels = ['age', 'prescript', 'astigmatic', 'tearRate']            #特征标签
+    lenses_list = []                                                        #保存lenses数据的临时列表
+    lenses_dict = {}                                                        #保存lenses数据的字典，用于生成pandas
+    for each_label in lensesLabels:                                            #提取信息，生成字典
+        for each in lenses:
+            lenses_list.append(each[lensesLabels.index(each_label)])
+        lenses_dict[each_label] = lenses_list
+        lenses_list = []
+    # print(lenses_dict)                                                        #打印字典信息
+    lenses_pd = pd.DataFrame(lenses_dict)                                    #生成pandas.DataFrame
+    # print(lenses_pd)                                                        #打印pandas.DataFrame
+    le = LabelEncoder()                                                        #创建LabelEncoder()对象，用于序列化
+    for col in lenses_pd.columns:                                            #序列化
+        lenses_pd[col] = le.fit_transform(lenses_pd[col])
+    # print(lenses_pd)                                                        #打印编码信息
+
+    clf = tree.DecisionTreeClassifier(max_depth = 4)                        #创建DecisionTreeClassifier()类
+    clf = clf.fit(lenses_pd.values.tolist(), lenses_target)                    #使用数据，构建决策树
+    dot_data = StringIO()
+    tree.export_graphviz(clf, out_file = dot_data,                            #绘制决策树
+                        feature_names = lenses_pd.keys(),                     #获取1轴索引
+                        class_names = clf.classes_,                           #类别名
+                        filled=True,                                          #由颜色标使不纯度
+                         rounded=True,                                        #树节点为圆角矩形
+                        special_characters=True)
+    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
+    graph.write_pdf("tree.pdf")                                                #保存绘制好的决策树，以PDF的形式存储from sklearn.preprocessing import LabelEncoder, OneHotEncoder
+from sklearn.externals.six import StringIO
+from sklearn import tree
+import pandas as pd
+import pydotplus
+import os
+#帮助python找到Graphviz
+os.environ["PATH"] += os.pathsep + 'D:/user/Program Files/Graphviz/bin'
+if __name__ == '__main__':
+    with open('lenses.txt', 'r') as fr:                                        #加载文件
+        lenses = [inst.strip().split('\t') for inst in fr.readlines()]        #处理文件
+    lenses_target = []                                                        #提取每组数据的类别，保存在列表里
+    for each in lenses:
+        lenses_target.append(each[-1])
+    print(lenses_target)
+
+    lensesLabels = ['age', 'prescript', 'astigmatic', 'tearRate']            #特征标签
+    lenses_list = []                                                        #保存lenses数据的临时列表
+    lenses_dict = {}                                                        #保存lenses数据的字典，用于生成pandas
+    for each_label in lensesLabels:                                            #提取信息，生成字典
+        for each in lenses:
+            lenses_list.append(each[lensesLabels.index(each_label)])
+        lenses_dict[each_label] = lenses_list
+        lenses_list = []
+    # print(lenses_dict)                                                        #打印字典信息
+    lenses_pd = pd.DataFrame(lenses_dict)                                    #生成pandas.DataFrame
+    # print(lenses_pd)                                                        #打印pandas.DataFrame
+    le = LabelEncoder()                                                        #创建LabelEncoder()对象，用于序列化
+    for col in lenses_pd.columns:                                            #序列化
+        lenses_pd[col] = le.fit_transform(lenses_pd[col])
+    # print(lenses_pd)                                                        #打印编码信息
+
+    clf = tree.DecisionTreeClassifier(max_depth = 4)                        #创建DecisionTreeClassifier()类
+    clf = clf.fit(lenses_pd.values.tolist(), lenses_target)                    #使用数据，构建决策树
+    dot_data = StringIO()
+    tree.export_graphviz(clf, out_file = dot_data,                            #绘制决策树
+                        feature_names = lenses_pd.keys(),                     #获取1轴索引
+                        class_names = clf.classes_,                           #类别名
+                        filled=True,                                          #由颜色标使不纯度
+                         rounded=True,                                        #树节点为圆角矩形
+                        special_characters=True)
+    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
+    graph.write_pdf("tree.pdf")                                                #保存绘制好的决策树，以PDF的形。
\ No newline at end of file
Index: 03_Decision Trees/简单的决策树/DTs.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 03_Decision Trees/简单的决策树/DTs.py	(date 1565514874567)
+++ 03_Decision Trees/简单的决策树/DTs.py	(date 1565514874567)
@@ -0,0 +1,423 @@
+#!/usr/bin/python3.7
+# -*- coding: utf-8 -*-
+"""
+@Time     :2019/8/11 15:33
+
+@Author   :Yuki
+
+@FileName :DTs.py
+
+@E-mail   :fujii20180311@foxmail.com
+"""
+from matplotlib.font_manager import FontProperties
+import matplotlib.pyplot as plt
+from math import log
+import operator
+import pickle
+
+
+"""
+函数说明:存储决策树
+
+Parameters:
+    inputTree - 已经生成的决策树
+    filename - 决策树的存储文件名
+Returns:
+    无
+"""
+def storeTree(inputTree, filename):
+    with open(filename, 'wb') as fw:
+        pickle.dump(inputTree, fw)
+
+
+"""
+函数说明:读取决策树
+
+Parameters:
+    filename - 决策树的存储文件名
+Returns:
+    pickle.load(fr) - 决策树字典
+"""
+def grabTree(filename):
+    fr = open(filename, 'rb')
+    return pickle.load(fr)
+
+"""
+函数说明:计算给定数据集的经验熵(香农熵)
+
+Parameters:
+    dataSet - 数据集
+Returns:
+    shannonEnt - 经验熵(香农熵)
+"""
+def calcShannonEnt(dataSet):
+    numEntires = len(dataSet)  # 返回数据集的行数
+    labelCounts = {}  # 保存每个标签(Label)出现次数的字典
+    for featVec in dataSet:  # 对每组特征向量进行统计
+        currentLabel = featVec[-1]  # 提取标签(Label)信息
+        if currentLabel not in labelCounts.keys():  # 如果标签(Label)没有放入统计次数的字典,添加进去
+            labelCounts[currentLabel] = 0
+        labelCounts[currentLabel] += 1  # Label计数
+    shannonEnt = 0.0  # 经验熵(香农熵)
+    for key in labelCounts:  # 计算香农熵
+        prob = float(labelCounts[key]) / numEntires  # 选择该标签(Label)的概率
+        shannonEnt -= prob * log(prob, 2)  # 利用公式计算
+    return shannonEnt  # 返回经验熵(香农熵)
+
+
+"""
+函数说明:创建测试数据集
+
+Parameters:
+    无
+Returns:
+    dataSet - 数据集
+    labels - 特征标签
+"""
+
+def createDataSet():
+    dataSet = [[0, 0, 0, 0, 'no'],  # 数据集
+               [0, 0, 0, 1, 'no'],
+               [0, 1, 0, 1, 'yes'],
+               [0, 1, 1, 0, 'yes'],
+               [0, 0, 0, 0, 'no'],
+               [1, 0, 0, 0, 'no'],
+               [1, 0, 0, 1, 'no'],
+               [1, 1, 1, 1, 'yes'],
+               [1, 0, 1, 2, 'yes'],
+               [1, 0, 1, 2, 'yes'],
+               [2, 0, 1, 2, 'yes'],
+               [2, 0, 1, 1, 'yes'],
+               [2, 1, 0, 1, 'yes'],
+               [2, 1, 0, 2, 'yes'],
+               [2, 0, 0, 0, 'no']]
+    labels = ['年龄', '有工作', '有自己的房子', '信贷情况']  # 特征标签
+    return dataSet, labels  # 返回数据集和分类属性
+"""
+函数说明：读取文本文件创建数据集
+
+Parameters:
+    filename:文件名
+
+Returns:
+    dataSet:数据集
+    labels:分类属性
+"""
+def file2Matrix(filename):
+    with open(filename, 'r') as fr:
+        lenses = [line.strip().split('\t') for line in fr.readlines()]
+    labels = ['age', 'prescript', 'astigmatic', 'tearRate']    #特征标签
+    return lenses, labels
+    return 0
+"""
+函数说明:按照给定特征划分数据集
+
+Parameters:
+    dataSet - 待划分的数据集
+    axis - 划分数据集的特征
+    value - 需要返回的特征的值
+Returns:
+    无
+"""
+
+
+def splitDataSet(dataSet, axis, value):
+    retDataSet = []  # 创建返回的数据集列表
+    for featVec in dataSet:  # 遍历数据集
+        if featVec[axis] == value:
+            reducedFeatVec = featVec[:axis]  # 去掉axis特征
+            reducedFeatVec.extend(featVec[axis + 1:])  # 将符合条件的添加到返回的数据集
+            retDataSet.append(reducedFeatVec)
+    return retDataSet  # 返回划分后的数据集
+
+
+"""
+函数说明:选择最优特征
+
+Parameters:
+    dataSet - 数据集
+Returns:
+    bestFeature - 信息增益最大的(最优)特征的索引值
+"""
+
+
+def chooseBestFeatureToSplit(dataSet):
+    numFeatures = len(dataSet[0]) - 1  # 特征数量
+    baseEntropy = calcShannonEnt(dataSet)  # 计算数据集的香农熵
+    bestInfoGain = 0.0  # 信息增益
+    bestFeature = -1  # 最优特征的索引值
+    for i in range(numFeatures):  # 遍历所有特征
+        # 获取dataSet的第i个所有特征
+        featList = [example[i] for example in dataSet]
+        uniqueVals = set(featList)  # 创建set集合{},元素不可重复
+        newEntropy = 0.0  # 经验条件熵
+        for value in uniqueVals:  # 计算信息增益
+            subDataSet = splitDataSet(dataSet, i, value)  # subDataSet划分后的子集
+            prob = len(subDataSet) / float(len(dataSet))  # 计算子集的概率
+            newEntropy += prob * calcShannonEnt(subDataSet)  # 根据公式计算经验条件熵
+        infoGain = baseEntropy - newEntropy  # 信息增益
+        # print("第%d个特征的增益为%.3f" % (i, infoGain))            #打印每个特征的信息增益
+        if (infoGain > bestInfoGain):  # 计算信息增益
+            bestInfoGain = infoGain  # 更新信息增益，找到最大的信息增益
+            bestFeature = i  # 记录信息增益最大的特征的索引值
+    return bestFeature  # 返回信息增益最大的特征的索引值
+
+
+"""
+函数说明:统计classList中出现此处最多的元素(类标签)
+
+Parameters:
+    classList - 类标签列表
+Returns:
+    sortedClassCount[0][0] - 出现此处最多的元素(类标签)
+"""
+
+
+def majorityCnt(classList):
+    classCount = {}
+    for vote in classList:  # 统计classList中每个元素出现的次数
+        if vote not in classCount.keys(): classCount[vote] = 0
+        classCount[vote] += 1
+    sortedClassCount = sorted(classCount.items(), key=operator.itemgetter(1), reverse=True)  # 根据字典的值降序排序
+    return sortedClassCount[0][0]  # 返回classList中出现次数最多的元素
+
+
+"""
+函数说明:创建决策树
+
+Parameters:
+    dataSet - 训练数据集
+    labels - 分类属性标签
+    featLabels - 存储选择的最优特征标签
+Returns:
+    myTree - 决策树
+"""
+
+
+def createTree(dataSet, labels, featLabels):
+    classList = [example[-1] for example in dataSet]  # 取分类标签(是否放贷:yes or no)
+    if classList.count(classList[0]) == len(classList):  # 如果类别完全相同则停止继续划分
+        return classList[0]
+    if len(dataSet[0]) == 1:  # 遍历完所有特征时返回出现次数最多的类标签
+        return majorityCnt(classList)
+    bestFeat = chooseBestFeatureToSplit(dataSet)  # 选择最优特征
+    bestFeatLabel = labels[bestFeat]  # 最优特征的标签
+    featLabels.append(bestFeatLabel)
+    myTree = {bestFeatLabel: {}}  # 根据最优特征的标签生成树
+    del (labels[bestFeat])  # 删除已经使用特征标签
+    featValues = [example[bestFeat] for example in dataSet]  # 得到训练集中所有最优特征的属性值
+    uniqueVals = set(featValues)  # 去掉重复的属性值
+    for value in uniqueVals:  # 遍历特征，创建决策树。
+        myTree[bestFeatLabel][value] = createTree(splitDataSet(dataSet, bestFeat, value), labels.copy(), featLabels)
+    return myTree
+
+
+"""
+函数说明:获取决策树叶子结点的数目
+
+Parameters:
+    myTree - 决策树
+Returns:
+    numLeafs - 决策树的叶子结点的数目
+"""
+
+
+def getNumLeafs(myTree):
+    numLeafs = 0  # 初始化叶子
+    firstStr = next(iter(
+        myTree))  # python3中myTree.keys()返回的是dict_keys,不在是list,所以不能使用myTree.keys()[0]的方法获取结点属性，可以使用list(myTree.keys())[0]
+    secondDict = myTree[firstStr]  # 获取下一组字典
+    for key in secondDict.keys():
+        if type(secondDict[key]).__name__ == 'dict':  # 测试该结点是否为字典，如果不是字典，代表此结点为叶子结点
+            numLeafs += getNumLeafs(secondDict[key])
+        else:
+            numLeafs += 1
+    return numLeafs
+
+
+"""
+函数说明:获取决策树的层数
+
+Parameters:
+    myTree - 决策树
+Returns:
+    maxDepth - 决策树的层数
+"""
+
+
+def getTreeDepth(myTree):
+    maxDepth = 0  # 初始化决策树深度
+    firstStr = next(iter(
+        myTree))  # python3中myTree.keys()返回的是dict_keys,不在是list,所以不能使用myTree.keys()[0]的方法获取结点属性，可以使用list(myTree.keys())[0]
+    secondDict = myTree[firstStr]  # 获取下一个字典
+    for key in secondDict.keys():
+        if type(secondDict[key]).__name__ == 'dict':  # 测试该结点是否为字典，如果不是字典，代表此结点为叶子结点
+            thisDepth = 1 + getTreeDepth(secondDict[key])
+        else:
+            thisDepth = 1
+        if thisDepth > maxDepth: maxDepth = thisDepth  # 更新层数
+    return maxDepth
+
+
+"""
+函数说明:绘制结点
+
+Parameters:
+    nodeTxt - 结点名
+    centerPt - 文本位置
+    parentPt - 标注的箭头位置
+    nodeType - 结点格式
+Returns:
+    无
+"""
+
+
+def plotNode(nodeTxt, centerPt, parentPt, nodeType):
+    arrow_args = dict(arrowstyle="<-")  # 定义箭头格式
+    font = FontProperties(fname=r"c:\windows\fonts\simsun.ttc", size=14)  # 设置中文字体
+    '''
+        Axes.annotate(s, xy, *args, **kwargs)
+        s：注释文本的内容
+        xy：被注释的坐标点，二维元组形如(x,y)
+        xytext：注释文本的坐标点，也是二维元组，默认与xy相同
+        xycoords：被注释点的坐标系属性，允许输入的值如下
+            'figure points'	以绘图区左下角为参考，单位是点数
+            'figure pixels'	以绘图区左下角为参考，单位是像素数
+            'figure fraction'	以绘图区左下角为参考，单位是百分比
+            'axes points'	以子绘图区左下角为参考，单位是点数（一个figure可以有多个axex，默认为1个）
+            'axes pixels'	以子绘图区左下角为参考，单位是像素数
+            'axes fraction'	以子绘图区左下角为参考，单位是百分比
+            'data'	以被注释的坐标点xy为参考 (默认值)
+            'polar'	不使用本地数据坐标系，使用极坐标系
+        arrowprops：箭头的样式，dict（字典）型数据，如果该属性非空，
+        则会在注释文本和被注释点之间画一个箭头。如果不设置'arrowstyle' 
+        关键字，则允许包含以下关键字：
+            width	箭头的宽度（单位是点）
+            headwidth	箭头头部的宽度（点）
+            headlength	箭头头部的长度（点）
+            shrink	箭头两端收缩的百分比（占总长）
+            ?	任何 matplotlib.patches.FancyArrowPatch中的关键字
+        bbox:设置边框样式
+
+    '''
+    createPlot.ax1.annotate(nodeTxt, xy=parentPt, xycoords='axes fraction',  # 绘制结点
+                            xytext=centerPt, textcoords='axes fraction',
+                            va="center", ha="center", bbox=nodeType, arrowprops=arrow_args, FontProperties=font)
+
+
+"""
+函数说明:标注有向边属性值
+
+Parameters:
+    cntrPt、parentPt - 用于计算标注位置
+    txtString - 标注的内容
+Returns:
+    无
+"""
+
+
+def plotMidText(cntrPt, parentPt, txtString):
+    xMid = (parentPt[0] - cntrPt[0]) / 2.0 + cntrPt[0]  # 计算标注位置
+    yMid = (parentPt[1] - cntrPt[1]) / 2.0 + cntrPt[1]
+    createPlot.ax1.text(xMid, yMid, txtString, va="center", ha="center", rotation=30)
+
+
+"""
+函数说明:绘制决策树
+
+Parameters:
+    myTree - 决策树(字典)
+    parentPt - 标注的内容
+    nodeTxt - 结点名
+Returns:
+    无
+"""
+
+
+def plotTree(myTree, parentPt, nodeTxt):
+    # 边框为锯齿
+    decisionNode = dict(boxstyle="sawtooth", fc="0.8")  # 设置结点格式
+    leafNode = dict(boxstyle="round4", fc="0.8")  # 设置叶结点格式
+    numLeafs = getNumLeafs(myTree)  # 获取决策树叶结点数目，决定了树的宽度
+    depth = getTreeDepth(myTree)  # 获取决策树层数
+    # 获取下一个key
+    # 我们可以通过iter()函数获取这些可迭代对象的迭代器。
+    # 然后我们可以对获取到的迭代器不断使⽤next()函数来获取下⼀条数据对于字典是key
+    firstStr = next(iter(myTree))  # 下个字典
+    cntrPt = (plotTree.xOff + (1.0 + float(numLeafs)) / 2.0 / plotTree.totalW, plotTree.yOff)  # 中心位置
+    plotMidText(cntrPt, parentPt, nodeTxt)  # 标注有向边属性值
+    plotNode(firstStr, cntrPt, parentPt, decisionNode)  # 绘制结点
+    secondDict = myTree[firstStr]  # 下一个字典，也就是继续绘制子结点
+    plotTree.yOff = plotTree.yOff - 1.0 / plotTree.totalD  # y偏移
+    for key in secondDict.keys():
+        if type(secondDict[key]).__name__ == 'dict':  # 测试该结点是否为字典，如果不是字典，代表此结点为叶子结点
+            plotTree(secondDict[key], cntrPt, str(key))  # 不是叶结点，递归调用继续绘制
+        else:  # 如果是叶结点，绘制叶结点，并标注有向边属性值
+            plotTree.xOff = plotTree.xOff + 1.0 / plotTree.totalW
+            plotNode(secondDict[key], (plotTree.xOff, plotTree.yOff), cntrPt, leafNode)
+            plotMidText((plotTree.xOff, plotTree.yOff), cntrPt, str(key))
+    plotTree.yOff = plotTree.yOff + 1.0 / plotTree.totalD
+
+
+"""
+函数说明:创建绘制面板
+
+Parameters:
+    inTree - 决策树(字典)
+Returns:
+    无
+"""
+
+
+def createPlot(inTree):
+    fig = plt.figure(1, facecolor='white')  # 创建fig
+    fig.clf()  # 清空fig
+    axprops = dict(xticks=[], yticks=[])  # 设置X，Y轴方法--刻度、标签
+    createPlot.ax1 = plt.subplot(111, frameon=False, **axprops)  # 去掉x、y轴
+    plotTree.totalW = float(getNumLeafs(inTree))  # 获取决策树叶结点数目
+    plotTree.totalD = float(getTreeDepth(inTree))  # 获取决策树层数
+    plotTree.xOff = -0.5 / plotTree.totalW;
+    plotTree.yOff = 1.0;  # x偏移
+    plotTree(inTree, (0.5, 1.0), '')  # 绘制决策树
+    plt.show()  # 显示绘制结果
+
+
+"""
+函数说明:使用决策树分类
+
+Parameters:
+    inputTree - 已经生成的决策树
+    featLabels - 存储选择的最优特征标签
+    testVec - 测试数据列表，顺序对应最优特征标签
+Returns:
+    classLabel - 分类结果
+"""
+
+
+def classify(inputTree, idx, testVec):
+    firstStr = next(iter(inputTree))  # 获取决策树结点
+    secondDict = inputTree[firstStr]  # 下一个字典
+    #featIndex = featLabels.index(firstStr)
+    for key in secondDict.keys():
+        if testVec[idx] == key:
+            if type(secondDict[key]).__name__ == 'dict':
+                classLabel = classify(secondDict[key], idx+1, testVec)
+            else:
+                classLabel = secondDict[key]
+    return classLabel
+
+
+if __name__ == '__main__':
+    #dataSet, labels = createDataSet()
+    dataSet, labels = file2Matrix('./lenses.txt')
+    featLabels = []
+    ret = calcShannonEnt(dataSet)
+    myTree = createTree(dataSet, labels, featLabels)
+    print(featLabels)
+    #createPlot(myTree)
+    # testVec = [0,0]                                        #测试数据
+    # result = classify(myTree, 0, testVec)
+    # if result == 'yes':
+    #     print('放贷')
+    # if result == 'no':
+    #     print('不放贷')
Index: 04_Naive Bayesian Model/Simple bayes/bayes.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/Simple bayes/bayes.py	(date 1565771235290)
+++ 04_Naive Bayesian Model/Simple bayes/bayes.py	(date 1565771235290)
@@ -0,0 +1,149 @@
+#!/usr/bin/python3.7
+# -*- coding: utf-8 -*-
+"""
+@Time     :2019/8/14 16:20
+
+@Author   :Yuki
+
+@FileName :bayes.py
+
+@E-mail   :fujii20180311@foxmail.com
+"""
+
+import numpy as np
+from functools import reduce
+
+"""
+函数说明:创建实验样本
+
+Parameters:
+	无
+Returns:
+	postingList - 实验样本切分的词条
+	classVec - 类别标签向量
+"""
+def loadDataSet():
+	postingList=[['my', 'dog', 'has', 'flea', 'problems', 'help', 'please'],				#切分的词条
+				['maybe', 'not', 'take', 'him', 'to', 'dog', 'park', 'stupid'],
+				['my', 'dalmation', 'is', 'so', 'cute', 'I', 'love', 'him'],
+				['stop', 'posting', 'stupid', 'worthless', 'garbage'],
+				['mr', 'licks', 'ate', 'my', 'steak', 'how', 'to', 'stop', 'him'],
+				['quit', 'buying', 'worthless', 'dog', 'food', 'stupid']]
+	classVec = [0,1,0,1,0,1]   																#类别标签向量，1代表侮辱性词汇，0代表不是
+	return postingList,classVec																#返回实验样本切分的词条和类别标签向量
+
+"""
+函数说明:将切分的实验样本词条整理成不重复的词条列表，也就是词汇表
+
+Parameters:
+	dataSet - 整理的样本数据集
+Returns:
+	vocabSet - 返回不重复的词条列表，也就是词汇表
+"""
+def createVocabList(dataSet):
+	vocabSet = set([])  					#创建一个空的不重复列表
+	for document in dataSet:
+		vocabSet = vocabSet | set(document) #取并集
+	return list(vocabSet)
+
+"""
+函数说明:根据vocabList词汇表，将inputSet向量化，向量的每个元素为1或0
+
+Parameters:
+	vocabList - createVocabList返回的列表
+	inputSet - 切分的词条列表
+Returns:
+	returnVec - 文档向量,词集模型
+"""
+def setOfWords2Vec(vocabList, inputSet):
+	returnVec = [0] * len(vocabList)									#创建一个其中所含元素都为0的向量
+	for word in inputSet:												#遍历每个词条
+		if word in vocabList:											#如果词条存在于词汇表中，则置1
+			returnVec[vocabList.index(word)] = 1
+		else: print("the word: %s is not in my Vocabulary!" % word)
+	return returnVec													#返回文档向量
+
+
+"""
+函数说明:朴素贝叶斯分类器训练函数
+
+Parameters:
+    trainMatrix - 训练文档矩阵，即setOfWords2Vec返回的returnVec构成的矩阵
+    trainCategory - 训练类别标签向量，即loadDataSet返回的classVec
+Returns:
+    p0Vect - 侮辱类的条件概率数组
+    p1Vect - 非侮辱类的条件概率数组
+    pAbusive - 文档属于侮辱类的概率
+"""
+def trainNB0(trainMatrix,trainCategory):
+    numTrainDocs = len(trainMatrix)                            #计算训练的文档数目
+    numWords = len(trainMatrix[0])                            #计算每篇文档的词条数
+    pAbusive = sum(trainCategory)/float(numTrainDocs)        #文档属于侮辱类的概率
+    p0Num = np.ones(numWords); p1Num = np.ones(numWords)    #创建numpy.ones数组,词条出现数初始化为1，拉普拉斯平滑
+    p0Denom = 2.0; p1Denom = 2.0                            #分母初始化为2,拉普拉斯平滑
+    for i in range(numTrainDocs):
+        if trainCategory[i] == 1:                            #统计属于侮辱类的条件概率所需的数据，即P(w0|1),P(w1|1),P(w2|1)···
+            p1Num += trainMatrix[i]
+            p1Denom += sum(trainMatrix[i])
+        else:                                                #统计属于非侮辱类的条件概率所需的数据，即P(w0|0),P(w1|0),P(w2|0)···
+            p0Num += trainMatrix[i]
+            p0Denom += sum(trainMatrix[i])
+    p1Vect = np.log(p1Num/p1Denom)                            #取对数，防止下溢出
+    p0Vect = np.log(p0Num/p0Denom)
+    return p0Vect,p1Vect,pAbusive                            #返回属于侮辱类的条件概率数组，属于非侮辱类的条件概率数组，文档属于侮辱类的概率
+
+
+"""
+函数说明:朴素贝叶斯分类器分类函数
+
+Parameters:
+    vec2Classify - 待分类的词条数组
+    p0Vec - 侮辱类的条件概率数组
+    p1Vec -非侮辱类的条件概率数组
+    pClass1 - 文档属于侮辱类的概率
+Returns:
+    0 - 属于非侮辱类
+    1 - 属于侮辱类
+"""
+def classifyNB(vec2Classify, p0Vec, p1Vec, pClass1):
+    p1 = sum(vec2Classify * p1Vec) + np.log(pClass1)        #对应元素相乘。logA * B = logA + logB，所以这里加上log(pClass1)
+    p0 = sum(vec2Classify * p0Vec) + np.log(1.0 - pClass1)
+	#print("{0:%.3f},{1:%.3f}".format(p1, p0))
+	#print(p1)
+
+    if p1 > p0:
+        return 1
+    else:
+        return 0
+
+"""
+函数说明:测试朴素贝叶斯分类器
+
+Parameters:
+	无
+Returns:
+	无
+"""
+def testingNB():
+	listOPosts, listClasses = loadDataSet() #创建实验样本
+	myVocabList = createVocabList(listOPosts)								#创建词汇表
+	trainMat=[]
+	for postinDoc in listOPosts:
+		trainMat.append(setOfWords2Vec(myVocabList, postinDoc))				#将实验样本向量化
+	p0V,p1V,pAb = trainNB0(np.array(trainMat),np.array(listClasses))		#训练朴素贝叶斯分类器
+	testEntry = ['love', 'my', 'dalmation']									#测试样本1
+	thisDoc = np.array(setOfWords2Vec(myVocabList, testEntry))				#测试样本向量化
+	if classifyNB(thisDoc,p0V,p1V,pAb):
+		print(testEntry,'属于侮辱类')										#执行分类并打印分类结果
+	else:
+		print(testEntry,'属于非侮辱类')										#执行分类并打印分类结果
+	testEntry = ['stupid', 'garbage']										#测试样本2
+
+	thisDoc = np.array(setOfWords2Vec(myVocabList, testEntry))				#测试样本向量化
+	if classifyNB(thisDoc,p0V,p1V,pAb):
+		print(testEntry,'属于侮辱类')										#执行分类并打印分类结果
+	else:
+		print(testEntry,'属于非侮辱类')										#执行分类并打印分类结果
+
+if __name__ == '__main__':
+	testingNB()
Index: 04_Naive Bayesian Model/email Filter/spam/3.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/spam/3.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/spam/3.txt	(date 1551675378000)
@@ -0,0 +1,13 @@
+You Have Everything To Gain!
+
+Incredib1e gains in length of 3-4 inches to yourPenis, PERMANANTLY
+
+Amazing increase in thickness of yourPenis, up to 30%
+BetterEjacu1ation control
+Experience Rock-HardErecetions
+Explosive, intenseOrgasns
+Increase volume ofEjacu1ate
+Doctor designed and endorsed
+100% herbal, 100% Natural, 100% Safe
+The proven NaturalPenisEnhancement that works!
+100% MoneyBack Guaranteeed
\ No newline at end of file
Index: 04_Naive Bayesian Model/Simple bayes/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/Simple bayes/__init__.py	(date 1565770806746)
+++ 04_Naive Bayesian Model/Simple bayes/__init__.py	(date 1565770806746)
@@ -0,0 +1,12 @@
+#!/usr/bin/python3.7
+# -*- coding: utf-8 -*-
+"""
+@Time     :2019/8/14 16:20
+
+@Author   :Yuki
+
+@FileName :__init__.py.py
+
+@E-mail   :fujii20180311@foxmail.com
+"""
+
Index: 04_Naive Bayesian Model/email Filter/spam/6.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/spam/6.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/spam/6.txt	(date 1551675378000)
@@ -0,0 +1,8 @@
+OEM Adobe & Microsoft softwares
+Fast order and download
+
+Microsoft Office Professional Plus 2007/2010 $129
+Microsoft Windows 7 Ultimate $119
+Adobe Photoshop CS5 Extended
+Adobe Acrobat 9 Pro Extended
+Windows XP Professional & thousand more titles
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/spam/18.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/spam/18.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/spam/18.txt	(date 1551675378000)
@@ -0,0 +1,6 @@
+Codeine (the most competitive price on NET!)
+
+Codeine (WILSON) 30mg x 30 $156.00
+Codeine (WILSON) 30mg x 60 $291.00 (+4 FreeViagra pills)
+Codeine (WILSON) 30mg x 90 $396.00 (+4 FreeViagra pills)
+Codeine (WILSON) 30mg x 120 $492.00 (+10 FreeViagra pills)
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/spam/19.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/spam/19.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/spam/19.txt	(date 1551675378000)
@@ -0,0 +1,13 @@
+Get Up to 75% OFF at Online WatchesStore
+
+Discount Watches for All Famous Brands
+
+* Watches: aRolexBvlgari, Dior, Hermes, Oris, Cartier, AP and more brands
+* Louis Vuitton Bags & Wallets
+* Gucci Bags
+* Tiffany & Co Jewerly
+
+Enjoy a full 1 year WARRANTY
+Shipment via reputable courier: FEDEX, UPS, DHL and EMS Speedpost
+You will 100% recieve your order
+Save Up to 75% OFF Quality Watches
\ No newline at end of file
Index: 03_Decision Trees/sklearn的DTs/lenses.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 03_Decision Trees/sklearn的DTs/lenses.txt	(date 1565509394844)
+++ 03_Decision Trees/sklearn的DTs/lenses.txt	(date 1565509394844)
@@ -0,0 +1,24 @@
+young	myope	no	reduced	no lenses
+young	myope	no	normal	soft
+young	myope	yes	reduced	no lenses
+young	myope	yes	normal	hard
+young	hyper	no	reduced	no lenses
+young	hyper	no	normal	soft
+young	hyper	yes	reduced	no lenses
+young	hyper	yes	normal	hard
+pre	myope	no	reduced	no lenses
+pre	myope	no	normal	soft
+pre	myope	yes	reduced	no lenses
+pre	myope	yes	normal	hard
+pre	hyper	no	reduced	no lenses
+pre	hyper	no	normal	soft
+pre	hyper	yes	reduced	no lenses
+pre	hyper	yes	normal	no lenses
+presbyopic	myope	no	reduced	no lenses
+presbyopic	myope	no	normal	no lenses
+presbyopic	myope	yes	reduced	no lenses
+presbyopic	myope	yes	normal	hard
+presbyopic	hyper	no	reduced	no lenses
+presbyopic	hyper	no	normal	soft
+presbyopic	hyper	yes	reduced	no lenses
+presbyopic	hyper	yes	normal	no lenses
\ No newline at end of file
Index: 03_Decision Trees/sklearn的DTs/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 03_Decision Trees/sklearn的DTs/__init__.py	(date 1565510560451)
+++ 03_Decision Trees/sklearn的DTs/__init__.py	(date 1565510560451)
@@ -0,0 +1,12 @@
+#!/usr/bin/python3.7
+# -*- coding: utf-8 -*-
+"""
+@Time     :2019/8/11 16:02
+
+@Author   :Yuki
+
+@FileName :__init__.py.py
+
+@E-mail   :fujii20180311@foxmail.com
+"""
+
Index: 03_Decision Trees/sklearn的DTs/sklearn's DTs.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 03_Decision Trees/sklearn的DTs/sklearn's DTs.py	(date 1565510994379)
+++ 03_Decision Trees/sklearn的DTs/sklearn's DTs.py	(date 1565510994379)
@@ -0,0 +1,97 @@
+#!/usr/bin/python3.7
+# -*- coding: utf-8 -*-
+"""
+@Time     :2019/8/11 16:03
+
+@Author   :Yuki
+
+@FileName :sklearn's DTs.py
+
+@E-mail   :fujii20180311@foxmail.com
+"""
+from sklearn.preprocessing import LabelEncoder, OneHotEncoder
+from sklearn.externals.six import StringIO
+from sklearn import tree
+import pandas as pd
+import pydotplus
+import os
+#帮助python找到Graphviz
+os.environ["PATH"] += os.pathsep + 'D:/user/Program Files/Graphviz/bin'
+if __name__ == '__main__':
+    with open('lenses.txt', 'r') as fr:                                        #加载文件
+        lenses = [inst.strip().split('\t') for inst in fr.readlines()]        #处理文件
+    lenses_target = []                                                        #提取每组数据的类别，保存在列表里
+    for each in lenses:
+        lenses_target.append(each[-1])
+    print(lenses_target)
+
+    lensesLabels = ['age', 'prescript', 'astigmatic', 'tearRate']            #特征标签
+    lenses_list = []                                                        #保存lenses数据的临时列表
+    lenses_dict = {}                                                        #保存lenses数据的字典，用于生成pandas
+    for each_label in lensesLabels:                                            #提取信息，生成字典
+        for each in lenses:
+            lenses_list.append(each[lensesLabels.index(each_label)])
+        lenses_dict[each_label] = lenses_list
+        lenses_list = []
+    # print(lenses_dict)                                                        #打印字典信息
+    lenses_pd = pd.DataFrame(lenses_dict)                                    #生成pandas.DataFrame
+    # print(lenses_pd)                                                        #打印pandas.DataFrame
+    le = LabelEncoder()                                                        #创建LabelEncoder()对象，用于序列化
+    for col in lenses_pd.columns:                                            #序列化
+        lenses_pd[col] = le.fit_transform(lenses_pd[col])
+    # print(lenses_pd)                                                        #打印编码信息
+
+    clf = tree.DecisionTreeClassifier(max_depth = 4)                        #创建DecisionTreeClassifier()类
+    clf = clf.fit(lenses_pd.values.tolist(), lenses_target)                    #使用数据，构建决策树
+    dot_data = StringIO()
+    tree.export_graphviz(clf, out_file = dot_data,                            #绘制决策树
+                        feature_names = lenses_pd.keys(),                     #获取1轴索引
+                        class_names = clf.classes_,                           #类别名
+                        filled=True,                                          #由颜色标使不纯度
+                         rounded=True,                                        #树节点为圆角矩形
+                        special_characters=True)
+    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
+    graph.write_pdf("tree.pdf")                                                #保存绘制好的决策树，以PDF的形式存储from sklearn.preprocessing import LabelEncoder, OneHotEncoder
+from sklearn.externals.six import StringIO
+from sklearn import tree
+import pandas as pd
+import pydotplus
+import os
+#帮助python找到Graphviz
+os.environ["PATH"] += os.pathsep + 'D:/user/Program Files/Graphviz/bin'
+if __name__ == '__main__':
+    with open('lenses.txt', 'r') as fr:                                        #加载文件
+        lenses = [inst.strip().split('\t') for inst in fr.readlines()]        #处理文件
+    lenses_target = []                                                        #提取每组数据的类别，保存在列表里
+    for each in lenses:
+        lenses_target.append(each[-1])
+    print(lenses_target)
+
+    lensesLabels = ['age', 'prescript', 'astigmatic', 'tearRate']            #特征标签
+    lenses_list = []                                                        #保存lenses数据的临时列表
+    lenses_dict = {}                                                        #保存lenses数据的字典，用于生成pandas
+    for each_label in lensesLabels:                                            #提取信息，生成字典
+        for each in lenses:
+            lenses_list.append(each[lensesLabels.index(each_label)])
+        lenses_dict[each_label] = lenses_list
+        lenses_list = []
+    # print(lenses_dict)                                                        #打印字典信息
+    lenses_pd = pd.DataFrame(lenses_dict)                                    #生成pandas.DataFrame
+    # print(lenses_pd)                                                        #打印pandas.DataFrame
+    le = LabelEncoder()                                                        #创建LabelEncoder()对象，用于序列化
+    for col in lenses_pd.columns:                                            #序列化
+        lenses_pd[col] = le.fit_transform(lenses_pd[col])
+    # print(lenses_pd)                                                        #打印编码信息
+
+    clf = tree.DecisionTreeClassifier(max_depth = 4)                        #创建DecisionTreeClassifier()类
+    clf = clf.fit(lenses_pd.values.tolist(), lenses_target)                    #使用数据，构建决策树
+    dot_data = StringIO()
+    tree.export_graphviz(clf, out_file = dot_data,                            #绘制决策树
+                        feature_names = lenses_pd.keys(),                     #获取1轴索引
+                        class_names = clf.classes_,                           #类别名
+                        filled=True,                                          #由颜色标使不纯度
+                         rounded=True,                                        #树节点为圆角矩形
+                        special_characters=True)
+    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
+    print(lenses_pd.keys())
+    graph.write_pdf("tree.pdf")                                                #保存绘制好的决策树，以PDF的形。
Index: 04_Naive Bayesian Model/email Filter/spam/9.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/spam/9.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/spam/9.txt	(date 1551675378000)
@@ -0,0 +1,9 @@
+Bargains Here! Buy Phentermin 37.5 mg (K-25)
+
+Buy Genuine Phentermin at Low Cost
+VISA Accepted
+30 - $130.50
+60 - $219.00
+90 - $292.50
+120 - $366.00
+180 - $513.00
\ No newline at end of file
Index: 03_Decision Trees/简单的决策树/lenses.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 03_Decision Trees/简单的决策树/lenses.txt	(date 1565509394844)
+++ 03_Decision Trees/简单的决策树/lenses.txt	(date 1565509394844)
@@ -0,0 +1,24 @@
+young	myope	no	reduced	no lenses
+young	myope	no	normal	soft
+young	myope	yes	reduced	no lenses
+young	myope	yes	normal	hard
+young	hyper	no	reduced	no lenses
+young	hyper	no	normal	soft
+young	hyper	yes	reduced	no lenses
+young	hyper	yes	normal	hard
+pre	myope	no	reduced	no lenses
+pre	myope	no	normal	soft
+pre	myope	yes	reduced	no lenses
+pre	myope	yes	normal	hard
+pre	hyper	no	reduced	no lenses
+pre	hyper	no	normal	soft
+pre	hyper	yes	reduced	no lenses
+pre	hyper	yes	normal	no lenses
+presbyopic	myope	no	reduced	no lenses
+presbyopic	myope	no	normal	no lenses
+presbyopic	myope	yes	reduced	no lenses
+presbyopic	myope	yes	normal	hard
+presbyopic	hyper	no	reduced	no lenses
+presbyopic	hyper	no	normal	soft
+presbyopic	hyper	yes	reduced	no lenses
+presbyopic	hyper	yes	normal	no lenses
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/spam/7.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/spam/7.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/spam/7.txt	(date 1551675378000)
@@ -0,0 +1,9 @@
+Bargains Here! Buy Phentermin 37.5 mg (K-25)
+
+Buy Genuine Phentermin at Low Cost
+VISA Accepted
+30 - $130.50
+60 - $219.00
+90 - $292.50
+120 - $366.00
+180 - $513.00
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/spam/15.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/spam/15.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/spam/15.txt	(date 1551675378000)
@@ -0,0 +1,11 @@
+You Have Everything To Gain!
+
+Incredib1e gains in length of 3-4 inches to yourPenis, PERMANANTLY
+
+Amazing increase in thickness of yourPenis, up to 30%
+BetterEjacu1ation control
+Experience Rock-HardErecetions
+Explosive, intenseOrgasns
+Increase volume ofEjacu1ate
+Doctor designed and endorsed
+100% herbal, 100% Natural, 100% Safe
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/spam/14.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/spam/14.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/spam/14.txt	(date 1551675378000)
@@ -0,0 +1,7 @@
+BuyVIAGRA 25mg, 50mg, 100mg,
+BrandViagra, FemaleViagra from $1.15 per pill
+
+
+ViagraNoPrescription needed - from Certified Canadian Pharmacy
+
+Buy Here... We accept VISA, AMEX, E-Check... Worldwide Delivery
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/spam/13.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/spam/13.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/spam/13.txt	(date 1551675378000)
@@ -0,0 +1,7 @@
+OrderCializViagra Online & Save 75-90%
+
+0nline Pharmacy NoPrescription required
+Buy Canadian Drugs at Wholesale Prices and Save 75-90%
+FDA-Approved drugs + Superb Quality Drugs only!
+Accept all major credit cards
+        Order Today! From $1.38
Index: 04_Naive Bayesian Model/email Filter/spam/12.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/spam/12.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/spam/12.txt	(date 1551675378000)
@@ -0,0 +1,7 @@
+Buy Ambiem (Zolpidem) 5mg/10mg @ $2.39/- pill
+
+30 pills x 5 mg - $129.00
+60 pills x 5 mg - $199.20
+180 pills x 5 mg - $430.20
+30 pills x 10 mg - $ 138.00
+120 pills x 10 mg - $ 322.80
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/spam/11.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/spam/11.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/spam/11.txt	(date 1551675378000)
@@ -0,0 +1,13 @@
+You Have Everything To Gain!
+
+Incredib1e gains in length of 3-4 inches to yourPenis, PERMANANTLY
+
+Amazing increase in thickness of yourPenis, up to 30%
+BetterEjacu1ation control
+Experience Rock-HardErecetions
+Explosive, intenseOrgasns
+Increase volume ofEjacu1ate
+Doctor designed and endorsed
+100% herbal, 100% Natural, 100% Safe
+The proven NaturalPenisEnhancement that works!
+100% MoneyBack Guaranteeed
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/spam/10.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/spam/10.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/spam/10.txt	(date 1551675378000)
@@ -0,0 +1,6 @@
+OrderCializViagra Online & Save 75-90%
+
+0nline Pharmacy NoPrescription required
+Buy Canadian Drugs at Wholesale Prices and Save 75-90%
+FDA-Approved drugs + Superb Quality Drugs only!
+Accept all major credit cards
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/spam/1.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/spam/1.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/spam/1.txt	(date 1551675378000)
@@ -0,0 +1,4 @@
+--- Codeine 15mg -- 30 for $203.70 -- VISA Only!!! --
+
+-- Codeine (Methylmorphine) is a narcotic (opioid) pain reliever
+-- We have 15mg & 30mg pills -- 30/15mg for $203.70 - 60/15mg for $385.80 - 90/15mg for $562.50 -- VISA Only!!! ---
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/spam/24.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/spam/24.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/spam/24.txt	(date 1551675378000)
@@ -0,0 +1,11 @@
+You Have Everything To Gain!
+
+Incredib1e gains in length of 3-4 inches to yourPenis, PERMANANTLY
+
+Amazing increase in thickness of yourPenis, up to 30%
+BetterEjacu1ation control
+Experience Rock-HardErecetions
+Explosive, intenseOrgasns
+Increase volume ofEjacu1ate
+Doctor designed and endorsed
+100% herbal, 100% Natural, 100% Safe
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/spam/23.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/spam/23.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/spam/23.txt	(date 1551675378000)
@@ -0,0 +1,11 @@
+You Have Everything To Gain!
+
+Incredib1e gains in length of 3-4 inches to yourPenis, PERMANANTLY
+
+Amazing increase in thickness of yourPenis, up to 30%
+BetterEjacu1ation control
+Experience Rock-HardErecetions
+Explosive, intenseOrgasns
+Increase volume ofEjacu1ate
+Doctor designed and endorsed
+100% herbal, 100% Natural, 100% Safe
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/spam/22.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/spam/22.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/spam/22.txt	(date 1551675378000)
@@ -0,0 +1,12 @@
+Get Up to 75% OFF at Online WatchesStore
+
+Discount Watches for All Famous Brands
+
+* Watches: aRolexBvlgari, Dior, Hermes, Oris, Cartier, AP and more brands
+* Louis Vuitton Bags & Wallets
+* Gucci Bags
+* Tiffany & Co Jewerly
+
+Enjoy a full 1 year WARRANTY
+Shipment via reputable courier: FEDEX, UPS, DHL and EMS Speedpost
+You will 100% recieve your order
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/spam/21.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/spam/21.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/spam/21.txt	(date 1551675378000)
@@ -0,0 +1,4 @@
+Percocet 10/625 mg withoutPrescription 30 tabs - $225!
+Percocet, a narcotic analgesic, is used to treat moderate to moderately SeverePain
+Top Quality, EXPRESS Shipping, 100% Safe & Discreet & Private.
+Buy Cheap Percocet Online
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/spam/20.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/spam/20.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/spam/20.txt	(date 1551675378000)
@@ -0,0 +1,12 @@
+Get Up to 75% OFF at Online WatchesStore
+
+Discount Watches for All Famous Brands
+
+* Watches: aRolexBvlgari, Dior, Hermes, Oris, Cartier, AP and more brands
+* Louis Vuitton Bags & Wallets
+* Gucci Bags
+* Tiffany & Co Jewerly
+
+Enjoy a full 1 year WARRANTY
+Shipment via reputable courier: FEDEX, UPS, DHL and EMS Speedpost
+You will 100% recieve your order
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/spam/8.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/spam/8.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/spam/8.txt	(date 1551675378000)
@@ -0,0 +1,11 @@
+You Have Everything To Gain!
+
+Incredib1e gains in length of 3-4 inches to yourPenis, PERMANANTLY
+
+Amazing increase in thickness of yourPenis, up to 30%
+BetterEjacu1ation control
+Experience Rock-HardErecetions
+Explosive, intenseOrgasns
+Increase volume ofEjacu1ate
+Doctor designed and endorsed
+100% herbal, 100% Natural, 100% Safe
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/spam/2.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/spam/2.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/spam/2.txt	(date 1551675378000)
@@ -0,0 +1,8 @@
+Hydrocodone/Vicodin ES/Brand Watson
+
+Vicodin ES - 7.5/750 mg: 30 - $195 / 120 $570
+Brand Watson - 7.5/750 mg: 30 - $195 / 120 $570
+Brand Watson - 10/325 mg: 30 - $199 / 120 - $588
+NoPrescription Required
+FREE Express FedEx (3-5 days Delivery) for over $200 order
+Major Credit Cards + E-CHECK
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/spam/5.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/spam/5.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/spam/5.txt	(date 1551675378000)
@@ -0,0 +1,4 @@
+--- Codeine 15mg -- 30 for $203.70 -- VISA Only!!! --
+
+-- Codeine (Methylmorphine) is a narcotic (opioid) pain reliever
+-- We have 15mg & 30mg pills -- 30/15mg for $203.70 - 60/15mg for $385.80 - 90/15mg for $562.50 -- VISA Only!!! ---
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/spam/25.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/spam/25.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/spam/25.txt	(date 1551675378000)
@@ -0,0 +1,7 @@
+Experience with BiggerPenis Today! Grow 3-inches more
+
+The Safest & Most Effective Methods Of_PenisEn1argement.
+Save your time and money!
+BetterErections with effective Ma1eEnhancement products.
+
+#1 Ma1eEnhancement Supplement. Trusted by Millions. Buy Today!
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/ham/6.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/ham/6.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/ham/6.txt	(date 1551675378000)
@@ -0,0 +1,7 @@
+Hello,
+
+Since you are an owner of at least one Google Groups group that uses the customized welcome message, pages or files, we are writing to inform you that we will no longer be supporting these features starting February 2011. We made this decision so that we can focus on improving the core functionalities of Google Groups -- mailing lists and forum discussions.  Instead of these features, we encourage you to use products that are designed specifically for file storage and page creation, such as Google Docs and Google Sites.
+
+For example, you can easily create your pages on Google Sites and share the site (http://www.google.com/support/sites/bin/answer.py?hl=en&answer=174623) with the members of your group. You can also store your files on the site by attaching files to pages (http://www.google.com/support/sites/bin/answer.py?hl=en&answer=90563) on the site. If you�re just looking for a place to upload your files so that your group members can download them, we suggest you try Google Docs. You can upload files (http://docs.google.com/support/bin/answer.py?hl=en&answer=50092) and share access with either a group (http://docs.google.com/support/bin/answer.py?hl=en&answer=66343) or an individual (http://docs.google.com/support/bin/answer.py?hl=en&answer=86152), assigning either edit or download only access to the files.
+
+you have received this mandatory email service announcement to update you about important changes to Google Groups.
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/ham/3.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/ham/3.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/ham/3.txt	(date 1551675378000)
@@ -0,0 +1,8 @@
+WHat is going on there?
+I talked to John on email.  We talked about some computer stuff that's it.
+
+I went bike riding in the rain, it was not that cold.
+
+We went to the museum in SF yesterday it was $3 to get in and they had
+free food.  At the same time was a SF Giants game, when we got done we
+had to take the train with all the Giants fans, they are 1/2 drunk.
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/ham/4.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/ham/4.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/ham/4.txt	(date 1551675378000)
@@ -0,0 +1,3 @@
+Yo.  I've been working on my running website.  I'm using jquery and the jqplot plugin.  I'm not too far away from having a prototype to launch.  
+
+You used jqplot right?  If not, I think you would like it.
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/ham/7.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/ham/7.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/ham/7.txt	(date 1551675378000)
@@ -0,0 +1,6 @@
+Zach Hamm commented on your status.
+
+Zach wrote:
+"doggy style - enough said, thank you & good night"
+
+
Index: 04_Naive Bayesian Model/email Filter/ham/9.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/ham/9.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/ham/9.txt	(date 1551675378000)
@@ -0,0 +1,5 @@
+Hi Peter,
+
+These are the only good scenic ones and it's too bad there was a girl's back in one of them. Just try to enjoy the blue sky : ))
+
+D
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/ham/19.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/ham/19.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/ham/19.txt	(date 1551675378000)
@@ -0,0 +1,10 @@
+LinkedIn
+
+Julius O requested to add you as a connection on LinkedIn:
+
+Hi Peter.
+
+Looking forward to the book!
+
+ 
+Accept 	View invitation from Julius O
Index: 04_Naive Bayesian Model/email Filter/ham/18.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/ham/18.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/ham/18.txt	(date 1551675378000)
@@ -0,0 +1,8 @@
+Hi Peter,
+
+    Sure thing.  Sounds good.  Let me know what time would be good for you.
+I will come prepared with some ideas and we can go from there.
+
+Regards,
+
+-Vivek.
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/ham/17.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/ham/17.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/ham/17.txt	(date 1551675378000)
@@ -0,0 +1,11 @@
+Benoit Mandelbrot 1924-2010
+
+Benoit Mandelbrot 1924-2010
+
+Wilmott Team
+
+Benoit Mandelbrot, the mathematician, the father of fractal mathematics, and advocate of more sophisticated modelling in quantitative finance, died on 14th October 2010 aged 85.
+
+Wilmott magazine has often featured Mandelbrot, his ideas, and the work of others inspired by his fundamental insights.
+
+You must be logged on to view these articles from past issues of Wilmott Magazine.
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/ham/16.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/ham/16.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/ham/16.txt	(date 1551675378000)
@@ -0,0 +1,1 @@
+yeah I am ready.  I may not be here because Jar Jar has plane tickets to Germany for me.  
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/ham/15.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/ham/15.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/ham/15.txt	(date 1551675378000)
@@ -0,0 +1,9 @@
+Hi Peter,
+ 
+The hotels are the ones that rent out the tent. They are all lined up on the hotel grounds : )) So much for being one with nature, more like being one with a couple dozen tour groups and nature.
+I have about 100M of pictures from that trip. I can go through them and get you jpgs of my favorite scenic pictures.
+ 
+Where are you and Jocelyn now? New York? Will you come to Tokyo for Chinese New Year? Perhaps to see the two of you then. I will go to Thailand for winter holiday to see my mom : )
+ 
+Take care,
+D
Index: 04_Naive Bayesian Model/email Filter/ham/14.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/ham/14.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/ham/14.txt	(date 1551675378000)
@@ -0,0 +1,10 @@
+LinkedIn
+
+Kerry Haloney requested to add you as a connection on LinkedIn:
+
+Peter,
+
+I'd like to add you to my professional network on LinkedIn.
+
+- Kerry Haloney
+ 
Index: 04_Naive Bayesian Model/email Filter/ham/13.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/ham/13.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/ham/13.txt	(date 1551675378000)
@@ -0,0 +1,10 @@
+Jay Stepp commented on your status.
+
+Jay wrote:
+""to the" ???"
+
+
+Reply to this email to comment on this status.
+
+To see the comment thread, follow the link below:
+
Index: 04_Naive Bayesian Model/email Filter/ham/12.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/ham/12.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/ham/12.txt	(date 1551675378000)
@@ -0,0 +1,11 @@
+Thanks Peter.
+
+I'll definitely check in on this. How is your book
+going? I heard chapter 1 came in and it was in 
+good shape. ;-)
+
+I hope you are doing well.
+
+Cheers,
+
+Troy
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/ham/11.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/ham/11.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/ham/11.txt	(date 1551675378000)
@@ -0,0 +1,8 @@
+Arvind Thirumalai commented on your status.
+
+Arvind wrote:
+""you know""
+
+
+Reply to this email to comment on this status.
+
Index: 04_Naive Bayesian Model/email Filter/ham/10.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/ham/10.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/ham/10.txt	(date 1551675378000)
@@ -0,0 +1,4 @@
+Ryan Whybrew commented on your status.
+
+Ryan wrote:
+"turd ferguson or butt horn."
Index: 04_Naive Bayesian Model/email Filter/ham/1.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/ham/1.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/ham/1.txt	(date 1551675378000)
@@ -0,0 +1,8 @@
+Hi Peter,
+
+With Jose out of town, do you want to
+meet once in a while to keep things
+going and do some interesting stuff?
+
+Let me know
+Eugene
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/ham/24.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/ham/24.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/ham/24.txt	(date 1551675378000)
@@ -0,0 +1,1 @@
+Ok I will be there by 10:00 at the latest.
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/ham/23.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/ham/23.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/ham/23.txt	(date 1551675378000)
@@ -0,0 +1,6 @@
+
+SciFinance now automatically generates GPU-enabled pricing & risk model source code that runs up to 50-300x faster than serial code using a new NVIDIA Fermi-class Tesla 20-Series GPU.
+
+SciFinance?is a derivatives pricing and risk model development tool that automatically generates C/C++ and GPU-enabled source code from concise, high-level model specifications. No parallel computing or CUDA programming expertise is required.
+
+SciFinance's automatic, GPU-enabled Monte Carlo pricing model source code generation capabilities have been significantly extended in the latest release. This includes:
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/ham/22.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/ham/22.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/ham/22.txt	(date 1551675378000)
@@ -0,0 +1,7 @@
+Hi Hommies,
+
+Just got a phone call from the roofer, they will come and spaying the foaming today. it will be dusty. pls close all the doors and windows.
+Could you help me to close my bathroom window, cat window and the sliding door behind the TV?
+I don't know how can those 2 cats survive......
+
+Sorry for any inconvenience!
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/ham/21.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/ham/21.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/ham/21.txt	(date 1551675378000)
@@ -0,0 +1,6 @@
+we saw this on the way to the coast...thought u might like it
+
+hangzhou is huge, one day wasn't enough, but we got a glimpse...
+
+we went inside the china pavilion at expo, it is pretty interesting,
+each province has an exhibit...
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/ham/20.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/ham/20.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/ham/20.txt	(date 1551675378000)
@@ -0,0 +1,5 @@
+I've thought about this and think it's possible. We should get another
+lunch. I have a car now and could come pick you up this time. Does
+this wednesday work? 11:50?
+
+Can I have a signed copy of you book?
\ No newline at end of file
Index: 04_Naive Bayesian Model/email Filter/ham/8.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 04_Naive Bayesian Model/email Filter/ham/8.txt	(date 1551675378000)
+++ 04_Naive Bayesian Model/email Filter/ham/8.txt	(date 1551675378000)
@@ -0,0 +1,5 @@
+This e-mail was sent from a notification-only address that cannot accept incoming e-mail. Please do not reply to this message.
+
+Thank you for your online reservation. The store you selected has located the item you requested and has placed it on hold in your name. Please note that all items are held for 1 day.  Please note store prices may differ from those online.
+
+If you have questions or need assistance with your reservation, please contact the store at the phone number listed below. You can also access store information, such as store hours and location, on the web at http://www.borders.com/online/store/StoreDetailView_98.
\ No newline at end of file
diff --git 03_Decision Trees/tree.pdf 03_Decision Trees/tree.pdf
new file mode 100644
index 0000000000000000000000000000000000000000..6c9df25c48a7a784cab2ac5e56481a5b38413e72
GIT binary patch
literal 22777
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
Lkde_f(c}0Z_JB4P

diff --git 03_Decision Trees/sklearn的DTs/tree.pdf 03_Decision Trees/sklearn的DTs/tree.pdf
new file mode 100644
index 0000000000000000000000000000000000000000..6c9df25c48a7a784cab2ac5e56481a5b38413e72
GIT binary patch
literal 22777
zc$|Fqb8xTCwgn2uww+(B72CFL+qP}n_KNLf#kTFN*v5VLIeVXTzVBAus;+)!k1=Y_
z?x*{YG07A}#Aq4mSYXInu4+GEm;np`dm}3t9v%R_jH#Wuiv@t?A4mxX007X7S=zXm
zI{ovtF?2B%F*UX~F@@pdgK>6oGBvb?@yNN-9=AJQLEe6#c?B)H;Q<Q60Eq#DXmt1m
zfE|ox>pJdtfUIvCyD680C*AFTS#pr3rHXA;9G>Jxd($}0Q!e?&^27SUGQ$4bm-8pX
z8SCeh;oJH1Wl#L`<6-qK+uiQ-iGSlS$%~Ecr|(pYEsxc=@8{~mMc`;x<;%g@CI7eB
zqKC}k=nsP3XWpg#pgg}aB6}}kH|`Ig-v$Ujf*lOe$(&`}N_MnEV==H`5rPIC_*9}r
zfG6V-D0lq4yXBptni1}6j0Y(9W1lAPaTT1KUKt5DJpp}t!vjZ2MhO)s!Bko~b3AR0
zh1#rw3Qt<mkV`Pww}3m!&+Bz3yMG7&`SC)Xw>$sq5TuFGBkHii#u6T{jbHZ<htGq<
zq21Y~#}C8jV~z97t`{V(oxM>Asy!%si8i6Z!<DSXCMpF<6boGK&bw`}^-8hzVAp2;
zO<y@A%cu@jKQ2FK<7356U%G`~1M&lH-J9O(l5qCx;FWA|^PB+9_E1O~B=0ePo$n!e
zr*rfB--8|H)gtxtc>#4ShRArXY<ZM$-FL1bV(d7fhxJYj?LG$}^Of?=wx0RU40{xK
z`YgIFaC=O7>AzVw&E-!Tb~jzQ1e3lGO`*7yBWg1tA9{7$c2V1`T@>Z)r?2LV`tG-c
zaRjA@A2z(66Wu-7OF<lcU4$43+{64~J!1yBprs<z*dCp)h3%;J1j2GFSvcKW%eYEn
zjatqs^v}(Amp-H=X_ds_6tMjycp8YLX~OXUQg&-v$#SK5OeFvQ!1f5!r<36uE_6Dx
zo=azew<ievtpZ*P_>Kbk^Yj8%0{-T(oG7!tHD((QV=9*=M-3(0@f>jy+l$kIlP01X
ze+CUE8KSW-VhL+?k%a1t2RhU~u!Y*q8P0%Mn*Ig)X3Qh~k=4>cnEHY3of6XcjQuhq
zpuCSgL9K{9F0-6U8Qyv4oxvk~Q?YwxxFKGxjH+UpC{L@{HK|x-!|%rNbl07==JawK
zLxV`Ws-Y^XQF6?P-Vv-aHOs=R^0jQFjbuZ2Z=O-t4HfOEp*XEPC#uLl{K<*H>>-k|
zNw}W}6Q*gpM<||pwN#1;RIAX2HGY?GLnJYl+ggsC>(%TfDJ`H-`mG2vgdR?L<VP!U
zKd!)cW_#KAfHY(KGJTfHd`ZPIm0KI&*I+yc=LyI>mxO-CRGlfW^@nTvWS$op!>A92
zw{;Hv<nD5jjl%TVP;U8|+qCFiQxBRO9*BZxFYKKp-w=fs+eGRPE<<to$COo}v4cgG
zgy0rAGE60DKM=|iCGx!?&l0J?H30yxSkidugjK_shu54mFaw!95Aa;7hah12Z~d2#
z1nQtparQMAxD!HYP~p<NabpK-{82Y_3f&R{X?gwB!#4h!=i^+DMc_4A={Q@EP$qjn
zG+MVNC%V+>K%qz;f}0-CulAM#7g}lM7oH4Sd2@naYAiJ7Na!QPQZnokd*yJ?vijEq
zgimW&7V6vP#W4<wFMK~&j6=t^z4W?ZL92zq{2<ArG=73<6i0=ccf=aa)dw%$9-pKi
z1B22V5PFDTaMPd~B-jIw3a|}wRzz;l&)C$AUhz!kCePSVLDm2(kqyUu-!Nispfy^t
z`R<Mf0wA}^OJ=m$Y*A80OvyT+Mfvb;`0^BoKwYuTU#TM{x5fkwN1)LQ1whIok11z1
zoKMrZdqDV86I1{w2v9|a+<+KQ4F~Iv1<J7$qx}IJPp$`ph9XVQ;0gu|MWasLX5Yp1
zE`1HzpBoEpI6_QtogJ=?>vUCmrz_Cr8hNo6VWp}bw8X~-m^YQb;z>(|w)JcyQWJiG
z8yRCkBveZyB3e1oCg}xiNkTSZ#Y-O~FNnQ$3b>LAZcBSmYSIYAkMd#Lx<sv$QGCc`
z54onV=f!ZIX9+>E=P3M$d{u`cy$I3rarBNCQ<sf1rJUUnd$lv&of>``y4*L;jR?bk
zc`pARRU^s=VX3KeN%Ut()f)CJ`To^aT!W+IEx&g|VxLWZxdyNQ{e_A+>iJ`&fdL&l
zZfcQOP<dmWhjZ*#P>$v@iJ3S-#6}0XFvw;|PfnJjv@7YGuXt4|7zi}zE+_tOX>@$5
zlG0SZ70!lOD4Wnb_O<A^>ZEUpA^lrH^?1M-xwWC_z8(Aztw)1jq7z^A#DiuC;PQ9g
z;Q$}mf8I>heS2gIE<`kK)$v}##)D@=)ej}LS_B$dH4pS>cZF|Lde=wNFk_hKPel4J
znl${rG{0Zgot|N<3-n=ZJz%d}=#@12UXHie#QaIH9_Ne}$j>I6#5vZKZ)3<A=>E@+
zYPlmLyio4x<3g&MI6b+>qMcXo&~T9`3#<?(cM-0(aP!%J5ULDVSTo~9Frw|{+HJ=K
zaflMwu9~!DdT~GyiDfy&BwOqEp&_0Oycn6A2E7s6F~E%*t{1aG+?EE(Ogx4!!;}uA
z%TGz}pNC7!?Mt*J@)cN=kFOTgjaVN`6s<x-AnO>T?}%i(k&_t4Gu@ccPJDNa*+l}C
zO2v~~i?kHs?nUBmLxFfpa<&cFS&aK-TwyfVr^nm7s`XFrMg!&|l3GsYQ}Hz}x3XxK
zrLPlGO;8{qEMX_dA;YbAlCnO75-mZwH7r=y>Np!fcka<QD!r36mjeF|$FPvVzzM5h
zyl65#gw@*RcO9LAR=Ce1D$t+no}veUG<l2Kvxh?bMk*UkB%sv4j99{gVe$%bPx6${
z4&*3+bg;^_9iXj;<F;lozVgMdD>;L&`ZJJ)Da>6@c?MxQAew+=FqvSz0|Z%N<EA!y
zXF!P{LqR<BuY1)2uU$wXM#Px>Eyk<y+d^#yKpi8Rl3}MF+w*sFo7SuR8_de)i}a})
z$2*Pq*>&EvG~#Pwj%CHKVC_)@J)5A?Xt6jt3ZBrImPrOO!zjAN27Oa-)w&Kb9h^zZ
zL~Bv+OXV;U@=C3y#iQC9v!qcizC)9G^T^WD`|hY4t&}kpt*Rj)wJ!V#r~%KL`Ma}U
z%es+^lSdcm8vyA*mbRRXfWlF>(D~)Gj>$)BePtc^!OZx3J6^TUdNBRTh(?iI?E7_O
zfp<Sy)rY5G`D%#JPTQ7yKN*CsLXX<+@Ih^K(_@id@eUX>UOQ^@^_ga0_!&tP>)zdv
z;;?qU(skUz6!#$m$mTZ#oE@-bzdMRaS3?9{GYASa8>H>&>g{h|24rg@*ZMgtvoZ+D
zH84_?-)MnD|GF|K_^mz4Khp<0vwIoa*|q!KV3Chy>`$u1e;cGod6gnd#4*WG+|E@W
z&mu&L4YhZrN(OiGn;WF%vPZKoMkc~$XhkOo>XY;iZcp+`bsHNzD#xW7)o8sdf<x6v
zx>$ek4G(g{j{kWcg`!Im%td>$1gwWBwMWgD6ZY)o`E_(%KhV3?n<;mtD%II8!-Qaa
zzQq`(%4OZtepC|+gEC!rEk!oexj$w@Ftvnlb>b2%c1)Q521&v?F!kLu`7vFG{LkNp
zuY?_-o~SUUb|(Kemj6WmvZO5kwx<6$Q6@HK&i}wn|KnKy%cF{VxQHve{Nqmn{|)>L
zGh_h#%g+i60vG}G#)kjQ|G3uwaE$-q82*c6_`e*}|8R7yOsp)N|E>6U{C{-J|EpvC
zKRU+$e;v#J>Nx(b;rPEi>;LjBoE!|y|4H=k#eXaRd!`q&w{!VFXEdW_pk)BC{>Q8T
zBl>6j`xmkOA5*X5>0k<=S1>d;{jV$vhEAsc<YD|Dk1uO#VreL3?*Y*M2VwxQF|q*I
zm{<V1|3wP_Q}Z9WGl2Pj^x{tTt`7faAOD^IztI0c%KxBFhIY;l|Egu|`5##LA6&%L
z&C=LZNnGgv98Ag7+1}O3*wh)o^j}r}_Z;m1@8*Q#|Fb#y7yjQuMgS8#Gb7voPrDM^
z4egUMyv@PKJlitcwA%ENd1=Si1-&i+fFwd1M+E?g*@wU)Lq1gG(9y{#p~O_0pMKL8
zsND&$K_c~IXjRszz|^d~EU!puH!oq7ekp6soBZr%n&;OyKfidoyPNgS@;ppUF+cQ}
zn<0xqQB}Y@QgZ#AbX4D7_gO>fs>5|$J=kkwZhJo-hVOUc65XYVR%7h)Tz>4J2`R%O
zGnHf3wHwd>jh}%JYOEt-@f%DEb;kTO6*`m*G3$f$6iyciYx?sDE<}sbPN(Da(D@{f
zu|fCe$)MfOYIx$!IniMczWp0phu`~Q>#2IEz8kSH8>8RVWjQOf+RZ)h1Fn{x#Dq#X
z#7!-L{!vY+xD%R>MvC{yayk_3`&T$xB!9GGKPikk^a})bkjW<tLC7c7laj6d73q`F
z)zFTX3S|8|tB5efC?2CY2yu+ZqiYKHa|?Mvok9wK7?N0MW?wSOzU9$iTS;3<)_L(*
z(qCZ=lK~tnkrTYN6i{i-`V3H-Ok>?UlhUnZ&N6h6IgEZN?cXpb3F@iJZlaH2oK3p4
z0^n=sESfdE8W(mh8&hWZ3coObnuEm5{{%57RSMc!q^e2UE+9mTE2(Udm6jSWSVBXP
zK6tiOC1nEXT()jv-@e#o#{&PHw`w&74F3t3RM05t2cNcS10~h^b@`5m2ENCj8TRR6
zF-pu8Lv^^=_<o@I<YP-8&~m;W%}{mvx1Gx>hczw==IM$k*ipLGq9XX=+2MGbhJ#rQ
z$l@O6w?+*@Ht~xCD7QK#@%?Hk^~B`lxsq$;fN&NnAERD^j2h>GDtericqqlSgLe=5
zu?W1LKDWK--;-(GkC!f`;kPdLDiTaS@e}*eg{a=}))zl(BTFO(Fk}`Y=eXHZabm;?
z5<M>OEc&271Wd`+$XZ94C!t$ThNazeHusMvGmS4UKn1eJ3VInMqBDpglh@LMei6<d
z1`_Q%oQxWTdFMI!85nsN-JBfk-FiAV9U^pZsz<|a)wArwo9DX6$K8e>2(IZ;DyfK}
z=+OA&b$}es5i_vG@wWMWHO7(nu0P%D>UCyxk0g=w5AG&nC%-=FO+?jxyRyEsSj(TZ
z*_`}#akKmZdi|X}lai`NjhU)aR<ni^)32&dtSPw|{B}1nfQ)xXFz!>M?piRfU6_SM
z?#f;TVOPo3YFR7RqObrXO--Vd%c6NeD&1OQG7npVQ(CbOr*UZBj%ro`)&i6kg1z8@
zJpy)5Q~gB+X!A3Xlr4#H!nju}S4vk~?2bGo0{Q(HoP|@{eMeJyMQO9E6N5X4H9#26
z7fBS*?IkNQDQp3w1ukO+i2`9BXne+kf_$LbU&A!rDI|JsklN0ny04qC*b~G~Lj(lW
zM;fK?N@YHsldUzO6c^Q)wj5x(MgfvV6dpxAkvK>@Oc@0~++d=}qz7<f$EW-HoXh{{
z?Z4jr#@W1GJx!UReQ0~}lPJ>)W96&gH{Ck(?!^^n2&Zjtzj61~ubTG_Pv0B8A?!I4
z#fPi|#e)Myz$mt=4cIrRv`Li)Suq#~vX+#Lb*(7pV(B*Vk&JFBHOX|fl)Tt;yZ8dl
zyYr)XZCqBCflffMMF!Fe5Tb|BqvAv2Q1an%sCre;i;t2u?&ctj&~cs{aObl8rD377
zoXlA)Tc$9Cc~>qaO>O;}wQ%>@QW{%!vP8VNuw<K7lh#J7uhl2RSw&-;p*{&i<9p25
z=06jV3OW|xkXbYH9AR5dYmDl)@x0z!@7PL`ImzWjVAHHgso$W8R^nk>oa><6-Kt3m
zu_iJhVKe><wdoC;;L5&v{ZCF^c=y6Fy=g`HI?h*V6q8likE1)suflJ4L3mLq&iX-M
z=j9G4$|EIyRX_nuuvS9gN*1;Ut*BT^1p2ed_XL+H@U)CGtY=hhXvzZBGlo*H#3*XO
zu9exwmC%Y|`*&8NiXmc$ViUS0WhHs>_`tZYWFf>^<lUT!{E06<M^c9cl7$mgPn{;!
zz%pJnQJ0lNEMgX?1kKA|u=4TP-jKe6DT6Ch2-noVE)|?OlQ8j7<svA^7b3)+O-odr
zO^6ZeUJ$HNY+Rp3p}jd{7K+Vt?8OZn%FXkfNUHDT2MLCpGPvz*rJd18m9*8$k7AQ=
ze$=K@JWt~kDXICgz@{LEAgpP}Jl#08RDmF=?*U@ip&*e$L2BU$#B`~R8aAK-)r300
z&blQI$8aZ8e);s5W=mLROB#A=z@&czCIoc^VpA@Zon+Kh5%9I9dsS0okV=aZONzEG
zo;-O8+Ey{;or+9IfIu3Ah-%#i3Qa$Du-cwCs*VZiM$q9m*>)1spLd<!18wVM6ixL9
za1D364{6NPce`E2oyWUB%;J1qCrf0Lx7e)f849<UZnI97zn2l^=1%n3ExtnQT6LJ=
z{8jMOqAAjJH@yyztnJFZ`Y`|}Z2@uk8b&HSMN^@w1fy?Kek}aC`a^YxqU(l9vW?5f
z2{jSShRzx(^$}<t9^ug0Fhz8i#NY_QyIgQ+4p@|X5&<S)U`jM$YI*_WifHYd*a}h=
zIb~xqz|(^B2#h9T#JTn&$Z17b#d!3?hC?OnOp0g%$vKB{r&6{V&TQl6%W2WpGew=9
zoeyzYIFQ-1SvV!VJ<Dz{j$Ad?4zM!iL86(c)4W@AGw4Npw#Tln465jW<Zy%<$`?tS
zFp+rUNoSJum2Hp3F~wrBt)rRK<Suo6?$6R9N7ou_uifHq2lg{t@6f@qc$hIUwkXE(
z^{`yw!6xEp8Fq0G%~D>r1`Q)eqEe3cS~aOUw0f+7b)X#HOnw*6;M4@YGiu5zm${4X
zA}QAFjV7wCpWWK-5<kL;>h+YJ)e+EydR@$3I<9RVZXail*zO&-aNp?0>F<&!Q}6h%
zoGW>^WwQnme7CkiL-#e>MrIKs!8&3t{HkT*SJU+iScrRH{wcgk<lRvgL^APw#9^3w
zX!5a}woThIpFMN+r9Yo|k@<)|GeX!C-y@$TSDJ}ZKw@XSnbI<^(J3{MSUu4(Bicow
z)i9ed9e+Uh$BUA7`<eQT8q7Rx(8Pf&i!?<#hp0uxN`Z7%rXZ9Ub>1lsgWyil!X#+#
zkiDJAyri#0bRVn@+tE2LR!co=VDzgXnOcFZ+-zmB9bhhRmu*_$rJ&ubN1f4xzk)4%
zi_O_Bqa>SF*OvDYP94UqMyiP(kQz<>%E3Wd<AMZYQG;Y*S1Z8nppc>RvTVqv3*|WX
ziYH1vMF9cz+aWUTK(*ZJbAgb0%A*>Z@Pj*8x2W;jDFKzQI*xWoz;dYW0?!J2T;m=#
z?3VoBGr1Hyxf(nV?^DBsv)#vGfep}oqg`!0jDN>ZKOkVkDSj^F%y(y{(d0T?>{$sK
zJwF(lmb_`y6@5qB$zGV(`H^W4zl3NlC}F%3_q$#UYh?jZHXyFLXdE*_GD<>fegb;J
zAerFcoJ`fp76*nr;Fmd6T1Y)n`my&W2u$OHZ(2N9S3zE&C(E1bBK>eVeHzty;(?8O
zp0BUL=bleItj<{WGmWPS<gmo?^<(2@1hoeMxUgT&I585Mw<e;QP2}LeUP(U<G;~zg
zf*Zu6RENo(_<uU%NscZIw`RwVd0#WHd-ET^DlY8l8{D%q-%xLm;)u|X_xaxK@Izwq
zfFCfYPQl%Km(P>or&2Sog&Jhs0A<Vo`au@*P9$_%3L-8^(U~`*U}5|N{}mBiti+W^
zszq<$R~_~60;v&7q+}Nf(=lrm&r&&C6nZ<d&8f{x`%N%SrVq*B3$Iz%!1+S#+I51t
zQ{l<d<CC{q^t|K1l{x$)w>!3n+~=AD<ptF9&2Pl<kAshs-L>E^U6A{p*B`Yt!K9Cs
z2`#u3U~Cf2)JUDWeqk{|PG>oKk9x%&<PKu6Z&^MUR<0GMN`t_xB8lKa_9$ZIR?3BF
z0t*rDd;fQXwAHo}N>(K#EI+mBGT}gNwc<1u?A(<y7T4(c033+cb;+U=LbDkFJs1TT
zcZlI*FcAwodpOr`yE1w08lMD72feu`%P8h5XG-)Lxp*l7FHACB>eNXD^rIls8J+Lz
z+D)$2Sgq&l>z8Yf$GJ&dw(ie+Uff!1q8lRu{fCX5+TN*fUteGQYu|Igx7}{CzD~dN
zZR2eE4r2E?1Jq8<8R^>Fa*Wq!2?kY(8-i9OTaj<XF1V@NT~~gQ{nmmLK||(s&^)W)
zZV*~7O%*jyxO^Uuq^skU0~>jF#65KKzAl|HX)eTGBUV}~aQm+?WQ2YqE@!SH!lLIK
zvr?>>K{m48LuhXAG35F@Pd<K|7DLjvN;8@HT;S%C{36fwaV9qO{z$L*>QQAhZkk*f
z)7B;rq1(9b=WYre`i`CEZu>XcG19Kj)+E5G5|3Q^MacAZYsVH_S4((zL5Ia+mTh|M
znvL6ZaML!2#pzuaPPY@{vo*p7(I}p4X{VyE$ni4UU+T+Lr+W2?0X@r_e8W0IlD=~a
zzpC+t>o<3iT>Cw0lhJtLal_o!uU7^F2(MSh>8<!;Zerfo286KafC$We*o+KO5d-b1
zqe&c}ejlv>+uUud1yfKbg~{1|1<!hhH6N_G#L1k(F^=DvmRZx9bwOr=ls2yG0-MLY
zFa{^z=mhb+Q_Lpt+E;Q09=SA^-EqHFmO~T<nx~nfI+v$*ia+zHGix&_Mu6!^;<bys
z&ZY=G^7I_-Uv{q8ZRq{p4DSVR2F9}qdBbEc2s&Sz^tQ@c`8_^6%(*C5J;!(TF1l>p
zc1!iYALnP7WBB9FvnPBZ-i`REi9oTQTeGHvx|VVr^zH2&qMh^rbxS!e=_A%t!rQBv
zqn)^=<PRthrpJT?n*|=0^JA}LMHkU-Dc97gVIyG(6*TzP1i02%3?yvE{YsX8Hs1j&
z3#|)?(KEw*@&1ZOx1OT%h=0%M5V}a=MpDbf<_(r6rcA6zgEd93S5%1bT4~_H4Wkd9
zR7k1O1VU(%>wtWQ6-@y`hQ&#@AMzjd=Ziiyy=;W~Fi{|xnpKK1&zzNf`^IdzqOSQ8
z%gXub+n~*>Q!*cpOsElFw3O-3im|ChNr)T=$9QaBoSS8(^KCP6s1*Pshrx(KT5%Vp
zWuMr@KgG|=&+%8-+=LCQ>lB-uU4kQSs_v?AR?W=np}Z2uu{{CL69i?v3skWu!gvy?
zwb80_cjZdSwH`ET@=G<OE$r&@mYTYgOfz~#96oH(Bjy)YO);*n63PL~9-JXMhJpJe
zG40?f35~%t21}yx)fsp4>9ta;%cWKo%0)Iava|v5d~>2M*=10-@hYlHGw0P+4(*w`
zM^5?!E21A$$HlALJ=6AsZKeLs`)T@ok0ZJCbf43;gnrMD(eCzZO)oP~-dRD)sK>Bo
zs^x@3Erh(GchBV;y?W1e$`|^_QhuJ7XWaI^Pi5D|YY@D(;5|9QD2iC-q*88MoS;bX
z0w4u^{p4`Le|?8Z`#@kh8SMMFV~28b31)yqKofw@>YCX{TmMZcQ00rl{Wm`LmrA%s
zCtR?#9AfH)8>I^OxDd^je3JV}*GY?y-2az;0vW0Jk*ZU6H*>bD*vyy|SO|BT$DeUx
zcQ6+Jp0FgbYXUf&yfK=h6eOg+<lW)&H{(xiJ)RN$J?MktPs{cL&%yS?N{H*?r9tMy
zICTq55B6a-y_W`tf_Oy)Abo3?VLiVj%dM2^t1i}-r2$=aZFjz58!jA5zgo@Qcl-P~
zK|N%VlE7t2Q3~c;9RLrfLF#5_SJzu#4%bs^xV+yJ5magolw&@K{lkGgwz)HO&Ka@y
z62VjaR=y5qyEI*5dEOC7Q_DR9I)7>2bN-$Ar_a(+Ye&yaJ&;+$YL$j91};N^|I=&$
zZ8-Ki9CT?Yu5GAaEJC7wv9J+cS^c_f_=L<hH-glP8Jookh+0r1$%x0)6e0Mkz7hqJ
z0E{Zh{(I60o~aqU%~cHc;4II${PJ&u<GG3EpP>BT_c!<DU!$Mh`6TEBbp!t05aRbZ
zQzMg8&(hln;dWx!WnOM<O=Vo!vP0&!)srdOAR-wH6U^Xgt=FIKi~dQ7U=}mYe|z2L
z-YQSaj?dqCW@8vTn+IgPWQNbqxLNAX63~;0sd6gF@r!6fuA-Pj6k*Dh$g(L{r4(Dq
zw9)C;-gAJ6ogGeL2KMB?%KTP-4kEazlT&~_@wD^1o{Cqtl~qc+Ox{|o^$(KeudOv$
z8$PdhT8_T8?P~omb9dOW{56B!9|k=WYgT_5VkwhGWTcy<>^TIHC<UDk4;cixCn<*{
z6obG_a2RwNVz4^RROJ^nMxJV`<wFXK*MNUOTwKGLQ2|BQoaqrofq~971Z}WXMln^T
z8Zj8+A-(P|1r!E$S<2tIKlh)pneiR>7<84~mf}qg<J~eRo*<H(6v=B=*s%j@HLftc
zdyC+1kHX(Rfej4<SnXO~L9sZCsdG0gQcB7YX!Cv*yFsen35+|hEG;W~!?l0BwJo*f
zuohgVE();r4g@V*+t%;cALHV&bJ)Q;E_Tx_nO=kMXxF&6-?X)M5kmRyR%Ott;nEvg
zAcnld>Z%lT2Yp!pA<3XeC?VeP%jgLJH;N<|x`VjPo_9-iIG-e>FpGCM*XE+?Vv{NI
zi}sxTXp+b<#WF-z%BPUR$1-#n7xY204D@&HmO!WJ)j*$|1y-i{b(N%ZVhgUdDgZ7t
zr_KX%g;FjIH}six5&NsNfwhrGe71~QF1Yfy2?+X`vAO$kZa)SIwkIhcy|F7#)D`uF
zQ~UgtKT6JZ;2kK1olh_VumY!SFXMQ6eGYq1uWQ?Pu2|}>I{eocuCA}w%<Jm-8+_)2
zyxkvjy??~9ee!?)*8KHmzjX7D|J~>P-IL8O{_^AEcpAhxi!kvsFgW`DeMhBRlY{Uq
z4s<&ceqh1ic>#0ns;xljk0i>KKPhU4fO8ac94+M7yO>3<O&O&K`wG-lpzOByd#bAb
z!WxvT-)`dzuSfC?(LCjVlHO#5UH#1P+YqsOelW&<7G3(yiaDoKa>m>;=J^(I5n<sX
zvc&C_rg@BJ;JN;6Ng#f#3_M*jy+FY$b9i6R-gECKW;};MH|f?7l_Eo~=6MHn<8kwP
zRG!9<h;cOVYUjef(_hD2!&cX@W!1Cz0<aq0eEX2ip30_u(I&j_IrNx3ZZ7cQZxoR3
zg4oX)=!TiBbL;$?)WDt8_f{Ek>Ph}3R++Q#uYs2(QPX0rSOCo}=C&+%$@@Bg?bLV7
z|LG7Gd99y)!muig;f{_I3KJ_78aA%qzA}gbO@-{qf_Qg{b*~&8lmR>}^AY{^tiq4Y
zX|1)UaE`(+%^$8Hcp_uYfdfW-9wRns!NdTw<XvVgkg~4QsSExNtOeidhZ(a45K}8m
zIQwN*ma<4af+ZXI2VJ=;jBCLmsq-Sx$|(XuP_DLiqQiOWSGUb_lzcqFht1oxHsN{K
z;{c>@Izg`c&pnwofkv~(=ItGKnf*r7%T6r4V<E6S?dH?|Xcq=AXTjrZD?5|G?I^(;
za$bYUgRk?6{r0D;*+JYmee3qe1i^M|-DJ)omjDI!)G0Ik$}0ao1QJj|Z<efq<IE7o
zasN0TM<OWZN&g*QI{-57xPRX7*i@KAe~%7}PM;#4%I24bM!le)#*WTw(Z%utp|jdL
z=Hmy1Jf-h0MaY<p(2~>dSMzMM$)?oxll8Rq71J`)dnVIN&rH+I7VdRj6M88O40Hr6
zEe>f*HhKv<N<B<{^)<Cu+GEX0<6-$UKE7A*W7Ek8QF=6YGXJDU4COX#vQ7}t2wZ_e
zV6+RlM;mOIA^3thpnET-zQvq3)+QNI=;%L?#gd5j1Syy$W@dr~DfcN71#}FY3>5YB
z4%C1R(8T_U{!w5)6c17X5PqPZQBW%&ZQ#|d=JqI785JKK)DTsfiuNlfZ<@?CRoghJ
z7|7`v?L_hWKLnAhnCBTmpOuAR{#6~6>HCAhQ;7fs3<#F=zQ!CrJ-JN1{<_hWVepJP
zMx;`Ch@!_zAZK)lH73>`ZTcoj*aX}<iQZbV%6hQ#O~P7E-5_a;#pW!O!SZn+E!oKH
zP2jx<#=p9;WP&T{8j6yp)^80?O6ogmaua`@{E3WmC*FS*zq16u2m)^i!{C+V#+a>w
z_QcK$bxo}Ccq4nKIC@nHb!MW~Goq@on~QF<xv^}(@`<%0$d=6<5Usm<)LYP>SVU2w
zFR&)ZkoBurvFgV5WfaTR0;hpkZoe&0B_g_sp8tZf$U375&}4+?DpO-&;HPVsPDWU+
z>{OBaRWBwiL6;_^fd!@5i%VzR>H&owKxd3o5aQsN_&b7%FND~NU|CGrWmzDe!M2yQ
z#d486#n?mnd&!9ml=&qd#D-`#N9F{6VfY8&48VFkVpKa$bQ<DcWBeiih)xm>?*9X!
zt*vfLrd#c*jJlOB&(k@syK3pbR||hpjk4=?@pt@bP>LYe?*-9}b0Muon*G;<*Q8K(
zJl}fzV@;R5Z$KS1y?&F!6sx0uk<VwD<l!}CTuE(@b%X!LrRDOSL!LC%?}}Xp@0A%`
zJ>yRp8%jp#PwJT(laD9@;aWWCV!hH<-9UU!2fer}oS8sjP6r0avSWA%^nb@Q+ovYe
zfwr9WypV3k?eR-^Ynh<jP6q06$LZGKT+RmK2sYD=zmf;K1Tf$9ZHd=1pud0lt9|#}
zBv;&8?<=Le%FMT4B8r;EMW2R?B0jwajAJ80s2sb1+(=wXC4|gkHj}w=)CZTpCj~pg
zL2l9t)UbtTqhtry>bz3kaYD6h;bBM>Becr*3(E3Jc_aApqk}t0r|&)z7U{o;Tdaur
z8;L`OYe*M<rwRQoMbe#fm`f9y5`&{^CL6n2gkMbvZN+AKCJ!m71dUJ`iWNHu^TnBc
zAKi+*1LKRmMd&m_6HLK$h)_!(jZsoP6?$iaW0vjFTx2n)U7xm5IWZNm;Rc35Blo&}
zuU%`e&NZDnEx5T>bY^lT`<ZaPDG3WT=F^4uDQ(5DS=xwP;&OV;=uBc&v&Cqm`P<4N
zv}XBa61yZjLRau}-aUt=3Qg@&xdE5;vj<8ul{6LkHkELt-z2xZtlMID^~6|1Hkwz8
z1hmw+t^0k@xS1ET<$T~>=Q3;_uk&<uT?W2tk26C-n9pLax47>M=@mWZu0DnR{R-P7
zpEUDyQO@&VaRa%uvc1uk5)Z7)t;qMy+T^;bxfFQLdJdLa7hP6Nih^$td7A1y@gR0w
z6LlSt74{JpUi+YnX~ni}k$IJkuVtoXr&+agsZGFz;k){k_*1;s^=7_p{xB=TtZ1JD
z*?U!a5MFKkcCn;+PI1zA^i*jU9{Uis?gnbVW+v9!uNt>45NCyQwyHZA8~A4tMh#uo
zQgs83Z=#z<(F~MEWhjfPi2D2T$&?%j{d}-AqX^5|38oa8dl=ai-%T|k%6_diV|ZMk
zm^pBcF~)sQmm`+mfG_Cc)?~`iik4w$2#%3aSY~R7z-&{K;i+C>$V7CV9CB(3rXN*6
z1}`F}`uT9{%8W~n$^2@#Nj<0i{RC45a)Ze=iDMmxDy-4MwE}k?kBvT=gpC=4lX0q*
zJc_eci&_Bg6IeIB)}1UGPbaRn>nU_Uo_5{MYrTeWm-Ql1Fb>mR`{!KxV#V!|7Ts@-
z&-MIyN_qCh_i68G(7W$IkHhoxwD0>Z^2hLgk1wLC5)s4xT^`Y<=c(^Q`)9gtL;n%C
zyW;1BcDnM3-=`Q77yJYSy~0Y3_jgihs;U>4M?@Y5sYVqUPp?!L60#c%A?&9~1Ra!)
zhz40RG<M)96jjJ#TkBj_M*gI-qG|`~zVR7I!W8?Jb4Sjxa>oqw35;mjFYkq~0w9wZ
zUl`4B%B&&%D<sn_X{nb;Cibr^djlffe%^{3=1C&F7gyMD`uJtrXsr+r=*wpxr6C(P
zUtcY^3bnpTvU6=^JOl`z+VN)p6`!_**$_zDgnap%lW<!HihN6}H<!veA+&sY97X&P
z5t5~^yB$fKd=XO_e&dN%$MatkToo3<80E^lu*KtUkc=Cg#hJNuOw7Bo4;I_G3N8Bt
zw~C6!#;{Dgb2zN8mfp>*D;aEdAq+x1#CYiO68x+^_-P~BS+vYHleDll?p!x6yn8-_
zZ<4pkbD;&t6>kO6M>JKEX!0S!*A5&OFp!)wG6M|e)9RIjR!n271ed$=ACVTLoeT|>
z>Y4i!sx%4^&W&u;*1k7?_LRd>`GnYjlPWwi%p5Q4NSw!{8WV4i7^p;$KP6T=hIFJ`
z&WA6_Q+BjkISviD<#XOwP&c>F9do+6E5?aff1gyoRlN>Qfh+vX0#Hksz>J@~HJFbP
zt+Of@B~@#PBpZ`_PFzVb+ES^quKlvt6btKU$axw}Shok=T8tylQ&2uV{$5xeNb~$m
zVS4BFUhJ6P5v}(5y<L}D>%ZSQH$A*u*VN_uU*;X=|I+%dG2hfJ=X<rWU!<|`uD88L
zI+2E7*skrTKr<mTjEc1nC~{jbu&>TA1rOTS`KSA30~!Vb3+9i80N@4~0VNgAWWWh9
zx#4HXe3>@N44VK2Rr<FXVI;r{jN38S+PSc4rfK9gblZ4t66?(B+JCXlasqoMh#rv&
zGCHF)0@dW~d9aV(<)9-+r>3`)96>P=1-S>F&ps%C<tn@qG@cazD7ExTP=@BQM?}zk
z>m<}n6pNI-99qm$n}a+`moTc6+}5CvMa`<aP>@qapvBJyAF++vo5%dL5qD-7F6&(6
z!H=nBhL)=Gt73{PFs<pAak@@h5v1+{jNQ8MvEVm5Or}3;7d1iAKJv_JEB0X^Rvdiv
z^k{2}u$OQ;kH>B2r&!ZksaP>+HI1pDgt-)U7nVL{sS%|@5i~qBkA9bg)9_2QnE+rn
z;}pgJb`%xmT$Pl}*y{{DPdg*X<ehEH^nTQ|?VMj%|8ee}#eaS8ym`5T!13yK=R9-_
zP~YO@gYNd~jZ-BLrW3SUdlyBT@L8e%B?AFR*8Oz=c0AWQzP5}&CQx!}lRxJZ1WiSb
z91VkFk{l4JAh8Tz`0Ht2@~JpEE()fTIWfuV%pf&DF|b&y&=0D*SnQc=FqIr<fW>zO
zoNA^FrUmNgQ-h2;EW(nU35x0{6sneQ>6(f_C9()<ofcG~AxFhZA=QZ%r<~<LY{AAV
z33Ff6q|&mon_xT6p29t2WwMP%`%cY?|0SS#dWp^-lb4LYsyi%C*)IS=3V&krjAA1E
zY;{6^o-nm;PP7zFPyCLgPAMiys)Y&LGU}IwoP8;fhnl4Xf(POIc?7j$R_;EzkyBtC
z__VPUJU)7wG}wSq+0=V6S`2(ha%D1=%7|N&Vw`S`1i7-1+E(LlKpYZMt6fYXNdd|v
zIVzDx3R<SH24$0hbfDxSONT7E6C%RZs(=(KFhDjA1s*el{{#KF>@+xVCv7LK;OBE4
z!<X4l_Gg4od|J&=!Rlgrv<=~Yu>@PC;u2yH@0V>yP<J6{5Z@}A_(cUW!5})_Twk>=
zI#%CK+d;TFDzg81UHH4*esWJXW?haW?)vj`c&A<p=V&f)_v2wO8a-lQq?b&x;66Yx
zJ>71*y8t}rdLjiDGfPJg*3EO8p*D`eTnv4uS`D*@GiW5csq;+s)z<}^VQdA<*T!}J
z)MOLuojv{|gW%voU;VM82^Z(PG~1ldEbr~Cvncf(fKAAEGT19AIAPH3BFX4MB%ucG
z4!$@blYpoN=Vrl(RU>*jp&OePvegHjVTTtzQGU$KM2|a>_|ICyEH??g6+Vt_ddVoW
zhH4^2b1WG|y;4Xs{LY__;2bxo61JmO&D?Yf2ll>d+NupjktvdVU?`H>9-63n99d|I
ziH2$&tT9o}f!#trCpc3tXPt)nT_$)&=Cm^k|A<OTEl}(Dnek>)0mj)C*UxwHAz9VA
zZQXHlsS+{%%&+xhBb!3KhAjTcjhDq_Yw2&i4GF6zk4L>d)m`vb@|=;GYN-cZXe4z6
z6)7k1DcPN?9?%eG<{yhBQwGz$hE<te-6HOpN)V3*HGRS>(@o_{vrw>;9Wk~kX2lto
z{>xT2aX1h2&{M(BIY`1s+SD?>?_<dLrrz#_7j7RyE@&nX;Hyc$P~nAYBgDKSGDdaS
zqcVd|#n@n2QiS9%d9nAj7F`K}t|^<ojbRKor>N(!5d)}~ywz~tW_^^8w)#};?6obK
z&<Z{WrwRCDR^g6h3U&UB9IOm)l8f2V0xTc!_sSsKDYvuq+b?bKk7LgB^jioBGj>F)
z1~G&T>tiQB63-AG+XMZ>h8U4RhyI#hVEGCe2eorg{6lUixIq~6wtO}Zh%ik9ZKmvK
zpr%ZaLT={dhxUTe1)5i#>jLTQ5U?E77X5)BCxh)6_JTI!=?7+X3+EKi=N07Ucrbs$
z{v!G&i^?LI*d)ReVewSvlSd5W7uc!}^s6S+bzbb|-W?H6tlYWBZXtR4Zbfq1Tt>a8
z9oU7b*SteB>PbizO(dfIky8Z1_~e=;JF86TQ+fc=yJUUiZaRbWV-_;}g9NjAw!orG
z-w~w1p{BYYp+4;3zPo|Q*N^x_>#Ot23-6r)++)krj}#`Uqx14fH!(Y^(0v@j;D*1`
z6bNB)xv^!Tbw2JYWpN%<8Sfz1u;~c#!OZ4Cg4_)vq2^oChD^c8taV7vBgf~4wl%JV
zz@Dl+a2>P}T>MY5Zn5v8?xJr^t=g{pn0veVZ~6*)1wIUgw8YXarhT<ZYU}JL(Mi9z
zfW}>;JFV-s&qRmTAkOF1=UBIy8Mjh0NRkbzPWo7`vYCJ{3X-nvnA%51I9+pG)4Erz
zCLir4_6=CuONHPX0NA0MDr3r9cOMotOF1zBm~kYFc6bEJTGMA#%WdgaVSA7u^w){e
zT!#O?)`=<<Q{A7}`cVLCyr5LxZ)3idGb$c3LocZ~llVTy{M;e7G>MVc`OCWw(Ab3p
zh2vCbtWI2F^TnAg=*2_SvYCaKR0Qj=E^9g^vz`$RBG;vqN?P-MaeR#GfhgN+3Sg@a
zE?c**<QH?qp3Gdhw<)C`qul*(HiYhmTvPR&ofInP7JN_r?r+0g{?*U7z@EO?OIVwn
zma9}uHhOO?`#XG|(1-ea9P;evD+F5oyOXY)pI1Gz_?YpW!)PG)8p;4>G;c(YwLFk?
zN0*dZIcwN;E!eL8l#~F|9FLkxMH@C+jPxv-)N_YZ2m91M!Q8!^J=@z^4716_B@FXu
z_pBeYeKXHMucimH8<3x?HInF{Co#J)2H}qR#vpCVUn*)EX!;rHc!o{uzNw3oxxu*C
zeqBnoE|_5%(KJI_x=Q>HNg2g7(r_-=*|JpNYnEunhS|XDO%45jU{F(o$zn)Vqoi_{
z{IO!>UPg)VjGn=H5h3cQ1<0}krCNVcFSBpJBo2#lRwUoaiKSCcbrZm~G+wKp_?2a!
z60H<ip0ARP3AE7Q4n9p!LgLIP0CYdcuOZp_;2zY<wdhK<oK#x3Xb-Bjk$Bw;#}`BY
z-t!pdO&zA0wLYSpGjL<YWlnd???TZX+kn-ru+K7~P3i&>Jp2LWe}jMCc}j=mzvlL@
zaK8A;)zxlwL&2o;dTs69eaZWr?BO8P-hF%H?)w~{l|M75VDdlU1uWhxKz}>W(B($p
zi{Ii+?JGF;nhmQ}YmXs9gTL8TC&eoYUF}{MoP4OXlBB+&_{QwNHD=?<^|~v4MG9)r
zrfe#Tu{(GI#V4}NX7p#A{W^^~bFvF;?r)yz0Cdi{SbIeO{l5Jud+A1?nvjFIC?nRU
z=PeGUL^Ec$Xe-kY{BjDv?Q*WjDd}>Kku&O)hq#j0IR=qDDzGIsw-+?3nRwo;z^VjT
z?r+oKl{nX3Q-W)|X{h%y?!Sep%tGRE7u{I&vu3r-u#dJaw9SuxEZG2K#a?;>2!%-q
zwZWgB68_Yx{LBMyJLh*PpLX|3hTF~r0#B}M0R|Y*L=WdR;v4w0)dWOcoGtiAf{bX*
zw4r~mBy<HB#%<y(h#FIx(+GB4vk#zfdr13|E*Tz76(t1|rD2}hk?i%J->1jv?`ZHl
z6IA*eJG$Rom9zi!-dws9a<sh^@0^b#%4<FRadzK+gW=z9wYeP{AmRVH`dsPt|E~J_
z<n;jA3DEzZ&m;8zQk<lj=H2zS+U3h2!vyGN-_qUhXJ-&3+@v+|DqvvY&4E;d>^AUN
z`>tETXhqlj?QZ}gEC|7e7NdTUQJXPBq*)VIvcsGWylPmC-NsJmBZ0)##o6scA24?S
z(qAF6vwI}-s9z%(?DTe#SmDir5vO(s;LWWuwVIXYDX=fLL}liw_WKl<YVuy(tOsjf
zU&73okHE~7#~3TxQw!rhcJtpt@WmLNp{NPWOC9GxmtGdC^+0XF9U`16pK6~WENGpG
zRXd)Y1ZcZPG?HeC5LY!ahu{_QhE(F$TcXMV&uXA<#G}<kgQ8m)yuiq*TwY$HM^LcM
zq91oUv+AiTs%rWkpB0P>=c46uyLSe?Y`cA3&eh*r8q4J#<gNF5c^<Ff=IpADw9agP
zKM`+Za$~844yx!6@|9ggjU=*<1Br~^N=tI)J<vPzoa*Dm!7J9Al(GPQiS{kb?lu%@
zVx5Ts-gv|lBvHT_M#eU3DG}K~M<9nO$xU745k~@UJI#FJ@+iyPB%Twtch?V~f&3Zd
zHhpb9YT)_VmMpk#AJL6#O4IUgl)PtKeX5wqlvf#?d4vpHGex-8&~s@xis}?i@c9|#
zrv!C;J$=0OCF-xYz2AO{joTnc>|kSZV|GkA^Z+n#<clOIX{1AUmo7z;UTjiDW<o(`
zdTe6NyR?)q`Q#}-b>+~snkARaJ1;?wSqj*UAK7xKav;XG2by25>p#F1okp~0=Br@m
z+=U}rqCbUv=T8grj|19^_2D097xEIF?okdN_Pe(|J<$c_&imUvf28}h2~BS7xb22{
zJ|iO2IcbW%UkAV*8iza64xvoDk~8x&Nd&trYd$equuEp}{wxbNqSz1dAgndw;;!#R
zZA4<u3a?hy6y>dYBbpRvy8z^cw;Mx?{e1+xrsaxN&a{6U6CgVlp%I?DsLdWf+uv~W
z8&-TFx!?S}0Qq~~Jdb|l`077>n$ds5{XA+K?*h3aoXo}Uu6z;c?coyWlWh}KGSU(a
zs5`=M8Pd!)^7IOn&K}isY~jV^@cxppYclGXU^E&>=1=n*l|X(HslS?M;v+YvS5EJq
z5+`ORjGS^anEc|dZ@P{E(2i~)Pbm{K%SUeAP$i~b3ie7vX5<?srQ3R!(4pLb(`z1Y
zAIo|(>+MKyLA1Hx8qL`56@K*Pr+m|I*2(^~er;qoePx}Emhk@c#`1NoXL(6GsWmvy
zECO5qc3#q1x3opIRr*7&CA4PMh#S31DH^*x2iz2dCI=M9(e51z_-id&nf3id?kmXX
z4&C{YXWZ7qSNO4VtV~daj_~sR)sTjnca<ybX5VA|KIr~J0E}<>Yb}-#l#WAzz>)Fy
zP65(RR=t|ms75HYyXq?hlW^uq9)X?=1{Cb^+x5zA!<hG<I$c6=K1bh!?>{f;{S=<&
z#F-K7D3ajTJuL&!1FDJm$d*V{%?S4h6sjxGB?DY5ynH^v3l_RIUm~B$FHF4_$_?R7
znX23{fy*ZXQ4~{|Ur$m9N^h}!7H4*k>IN=HQS8`cc+b_hv){2JdWOZkg;nMF8m<;`
zYU0_!@eF7&3|HF&Gx(hEv-q5A9VC#8`}i`XjbAvI_G)+|9mO=<tZ`U9+;e9d?xq8s
zKRgAr)dJkGWXlQk>&&7gIPp^DCGn*(L%2T)N%;@%ly9Ae(=m`I-KlHXB=7E&%1&$e
zPY(5<Vm<0aYBdu>_V!iJziVTa(W+gSI2tdOR2UIm9bCMd%I5kO8rBnx5dPwHn5-sN
z)&9{Oe7yU8T0?Dp0i3qKC7U^jL9qLJp`G62u781Qs@pTaYS(l1;eD;u_wjvW`*Z%5
zn_-==C2x~HigL<L;rF-_euF12!B0EXup~Q<z?UlEswm<4Dl`)+LJrC}VWN^kOQa+S
zlTUi6|L92ooj^l`DnSfhhAZ-`k%(IfI61c<vLg}FGZFDk5eQrnDs%v5OdQ#QA`C_W
z54{LXDBuMcN^tKl@Hrub;THwesl`Sci?F9jK-m$qMH>Y!(pZ0w2h~P&ToK_R?Clbt
z3zTbdzM!@7T$2UpJDY<B@^nxR<Q&T@Ou~;X-k3`<Q#0;+FK%u~BYT1OoZ->%_f-D8
zSaYa1X5I#fy<))mJX$jfZ%EzjR+L$B{M&~DYbU{WklKE$jPl9;lyN5J+{--CwRxtV
z#{(b>aW^@0HuPuu69Ybkf<RopIR4J~-mgTE##Z6J%L3jj%zEF^%<+Wj5fEk<&Ub4;
z%oQ1*h_=*=^acHK2Vuvubnio+%ZX6>rvjW-aJFEu9VVWH(a_Dz=!7)pT%ei2$`{AA
z2=w+!kY9k%DB6MOLFfb|#*GRG@n$jBFEHNGw<r7kd`;hW9u$(*!JO=!=$(oy_V88Q
zq|^X;0$jG8`GH_+6^RAa>jQ=7jq01C1F{#lqwTdJQ<0%gd#>1}d0u|*#t|uff4n^r
z4ru(H*ACu5fQpA3j8;I}usc6!!ygjn7}$uYy#4e|{jF}OyO$XocS-`q7t$B=3rc%m
zw%CKV7qc(^M?x$(<{RM+^u_ku^jm#F$KxV<Zu*Sqk@}s&?ZD83x)+%q*wvrL4~;)o
z{$TMHuabg!%;_GyEkt|zD}WGu_wT3HH{ZVBzTlmXzVhx}um1BFvvOVsp)9!18d#4%
zo-g9gB@$OCU%<`i8KOqNfY)v80ajk*P0$VRE72$3PO$#S_S}T!C*-I3r~4=3CpvHn
z1u=9Y7FB?K&Tpc&Wcy_EajMrma(^;?C%)PMX-8EZ+SRF=5Ix&tw|;m27jM3?`~zl&
znd3jGf8-3~Z>w&N_k%1FuUUx}x%K&XwHH3R_?FsgZX$bUdatK$0_`Y=Lju*T3SXS}
zyWmbfp!?f>&vb198(<Gmcu@2aNthw&2dnSAu*Rofu|IuRURLjL8Ki!K`vUm1B{QBp
zkt&Ic$4p*#L@<(;O&~pET#{eLP2~=za&jLW$hJ6YL$$|h4zKs}_7=9dx5T#y+oiWw
zZ>Miz2=`%MN%Idz@0?$?-)`>w4}M6eF#PCzh^Y^z55A1zU)e1ySd_AeWmC0E#7jUI
zyvx-3XV~ZcT#$}^Zn5o9&)7cZ2TOtw6Z8}Gf%s+xVcR3Y7*a0>HpjNxv(aEKhLKIc
z@<QltC9y8r#^jtLWA?~{{<7oKk_bO;h_L^_khXkgpYi-abZ^oZoIDkQ?+W)K(N>^l
zsKPhDq1rLzANa-b9r2Bz^x=Mmsn;XsQ_wpq1Ht<B$D?H_#CT)$%+!py7k`xi6CKkm
zy7eDQzM}8JGCOd7W2OT$+oKpLvc8DB5NgSNW9C9~?S$nG!M+Zk8L9-b7w{Ki22w*n
zwMCE>LH5a}-Cqrbb|LTUhqYA?gl3>_Suoq}=OOn22n)35sq_T<4)ua}@`>x5QQu(y
zuylh_?%BEUYvrzoTq9+@>hBLn3<BKVnESWc9FBe97GnEV%|PY3ftGx+UIlpBk)1vR
zI9EaSroa&H;C%8y_y#~BXu)y%fZNyT71}t09}9+q;6Yb`TYnyUEiKeeL?2zu7(2-x
zuyCM04Xn*Tm)aqHg9rq@Z_|3a=BW2}34v_&>0`*sLmDyzOLBb#%91H+^YpQ<z@Cd|
z_dd9EV$k9W+`j$iTvXE6^WInu+!-C#%IA4p@VQ{^-#D8cXx-sdA7zR0GaI(3J$B>g
zm!_mMp|IMenP}!r9wFX)NeeoZU`{w<{lRa%G5?=R&O99I@9pFEEi|@lVUUbU&6r_~
zeT*$evXw}h#xNsWW68c`WFI85Z-cUw2=i@`EGfz!vScg!5+zdN8Ct$Q^?R=C_sn&D
zuFstJ{W<qJ_xmh=zN`(3aDA8dd`)RkR%4*#*5luBY);b$DF#by%M5bEwwabQY_;I!
zbdx6s^#|i@`fl6a^XqN3aXnWNFwiX%BPgHQ-|dNd`%*Ybw)di!ba}BD<dK7wmnBYj
zBcUD_#*$KG$igou!xz4C#R_&UN06JDF({}1tv5of<c&jh>g;Gp2&9E4)=+c;YeSi}
zznE^)Twd!9tR;7Z$KFQ>-<}28$JIVSs|>bA>y{raMz-i~pEBz)a{4AyA#z){n$d{D
zwSxchF4d=swIh9yX&Hr`XzN<_Wihc|=4P>>CqEqv#fJsAq~b-WdZOJ}H=FK}P8F7t
zdGKM%TZ-TzMkCXR3oM<SCkF-XdP4)HA&imb7$4Tuv{N${Dnb%H3EWN3I>ig_>og8C
z&&ru+h%}QfR7`~y64d;H0?vs%)h}F>JH-^|&{puYix8#AXKOghqAs)uQtx|QtFQaf
z+B}7Mh1tUqUU>h0TNRf+$Dml!+8f`#;7Q&?m&vY!>HhGhYWU|Hdb2qHuYGvG{#QlA
z4<RCOI7)2!$njVg7l}Q_ZV|{#usX->MEN#j!XxJN*lu{9TVdU3gAZdH!FHeVixtxq
znZ*~@7^f?X1lS_k$`O1^tThu^e--~Vw#es*tza~~LyT|9ow7!_?8#h(ADdHUG*Y#Q
z(6}q6<iGE(l}Bj!w{@YWXmfl+)mGxuD*cs}5WwurCTO)lj{7|<R&P&4-r7cEu24Wa
zL@oIo9kdcAAMfgNI-)1wOMtb(trh%NO~84r%}u-V_Oy&P9=<tE0JB{7Dn(=%KIVBS
z`KVkTNGk3sB3y%P-*3ri<Tfw4^7)V=2Ro-kIs;af>gyxS8GJ-f_H(^BS6f(&=g_Nz
z-&CTf!c`Jar8u2PI^{Q=dg&Q7X@me>TGbp8VMQ-F7?#Mo7_MzEl=S!Bwf7P6-<F^X
z&aK~zQR=$7*0=EbMCzs9<e*@y?b;*Pz2jUbv=8h_1Uy?}Fl%2rhCY^lgrGsMnJD?`
zig*i?RSVJG)7jdk_EdaEvem-&=aVK=41v)yr^R1*L)F#1K7EQTy;DAyU6>Wd9p;k-
z#-8$jNbFVDQmn0C8DIj7x8b98^>22eb6+xTJ_(S}LwSI1*C)gkG1G0YmMu(LGNaD?
zBdo!%%9=uE*6Sb9P!bm#8X44}%JwK76SsW381X#5C4T6%VwFf_PZDDDJV@Q!9~#@s
zs}^vckU2tdv+E4~hY3arR{=AY=xe^t%+7Qo-<&R-sPO60_PIeGf6klHr6K~nqUY7L
zQd2A@GNKfCsz>s!d;X9E%!?PTM<qKgfk^(w5l@7=t&Zm1hb5iUnPpB7!QfS*qLTND
zbpxERmwi*}?@X_sZ~B1N6W9CbADMk~j!WhYYSn#lQ~X>VMYz!SIds<7#cy`PnZP$}
zI-AwFaLjYS_*+lts^-~}zN;6ds}c*yonFq*=SZ22C%u{UY^5)WaeHZH^;miDb)6T=
z3+Jv#FTxqsAdjc__vNsv-+W3ubY*Q-FvoY2%c0$AP9!QfXdf!dbQOh=_msMERS28!
z6ND;h(H@jVvvL-|lQEJq)85xLQkz#+Ge3V33Vi5^-6RXyH}{y1^_{%M7`F#brRtB1
zMwq6JzAkvSy6-3#%D8Q|##e9Pq>%eWYaz2Z&Zk$PNUfl*`eAHepVmcwJUrc~W4pO8
zcbyO*9XAl~Rfh#d&o72u?-O;&d84ss8IsaY;d1;+f1}17T1xNtfq$Oep@E<=!xRIO
z*Og0RR1&Vc6NWad;J;V(?SW4t0|?2;_U2G(nUyCJDlc$T2gS2px32*aehY|6rj|;_
z9?q=oZlS8zex7?F^X&$fKqn>xF>vHtJ{oI}oyFy?Mo(D;C*EJp8Vaq6FlUfx7Z=w@
z9gfVpG+VRbkrxAWYwn0gHG3uSxTN2V2MWAewD3sR6cndWGF{{Xjpj-Yh02~kZ+em^
zFw1l3I{u<Zm4FXhHb<CPbP=-wB}OYSx}z`v8@;7r9<qT_pa!a_#mrQNck?da)AbN+
zmh&(+59rs=Sxbx<$(uDM@H@H1GjbyZ`LKCliyU-J%L*)Xw8SD{NxNh~K0o@6w(Vrd
zQe{_Ob-2hxg#$>N*ZBx$ETnU)3m>G~D{5nH4(26$JNj1@iLpIq_7TX*9DU6ZAYY>Q
zOmD!VgR5SEv%$x&ms4Ptd6G$<t>d1ZLZC+pMc43b3#KkvuJ&$JZ|n8QRenljQxIL*
ziNYv1q2YpK@i*Hp5a|y_b7v<A?QJZjKNUXHqooV2ynqT0QVWFHqf@tp-oZo}=$31x
zL#f6slcak+?d(0Sob^w*?XTHr&wNs6>}#v&-)iJnfb4mDUvpn_=jyjM$8A4fyZ09a
z(ux`iIVZh>1)92_KR%AHiaz@OVSr<u#C)r)oRov;z7H3>nArLgPj~Jczln!e3vMvu
zrQWqMeFhs##x`i`4gue^)?Mw>8f3$$#GlM!Ta#>y__~g?-XqDjfi!p@HZ4I~=6E83
zvS!*arxRzyNS%H7Su?*Lu=eEB*;DJ*Fr}e7fhS2Zd9vm8t7T!Q=aJ7V_4oF*u?=)c
z7I34UZ!p|aG6#I9mgF};-FuSKcv5Lj@7A)i_R|h2ix1-3g{1(IRYh%-1JGjSG^ymM
z6pTN+_-dZ8w>qik$!n^#XWJP-;K?HKR`S&^&n&d*d@`f9j;V=0JundO)Wx1Ec*Vlu
zvShvNrT}}S=gZe-Zc~P{H~4ea_{Yu8vh$POWwI`uD~LF}WcWq;=I9tpE)>89&xIxn
zBANs)`DRH=S??8mPxNbD{KSZO0JdzN05u(!TnKaLXNaG2-$*Fee#E0KN(uy!wUxP$
zI&2sG;2ankQWl`SQ}wL4;8LvKt1nVV={i`(m=`kl2GUD1hK2=w$+eV7=frT6^nnW`
zU?maeC_{>)W%%dG5<av1V+F^|!}5>F6i;~@)Apm&b2skUyvFr&wfU)BD#<1bmkWyC
z5fn8mcHApccvH8~Zw`H(+GSCZB2l_dJm+)#m}h`MQ|f+w@7Vg0(WkyAMHt4LoXO3I
zha5?hs_{g%hW+DU>kz3l?Ea-HmDYKIYm#<A+319h7T<5&h*6x!_4j3U<W2g;of7r8
z=tf7AMk#UcIK@07=V`Nb=Wmc>v(o~!2!9UZ934#@l~mneOGe%b1G6@qVAGcjphrqc
zAj__enps?cgwF#3A8aBmKZyF=9@TP|m0(zv+yFdSb9MAG-jHM|Xsy&bkjNa6cVuie
zWj(>pD+oacKEw{?67nJ)){-`5KHZrn#4t1czRXr+Rx)@Yx=8Bb9Ba}#t)$TGN38O7
z5&3{3EqwT0jw@`PU+HS&2Z0MAclT(EFq{`|Iz$2?=*Pv_-c#xUFg9~w>hswX_@ao+
zIW#%?m4C~z=O&4J^)?S|2pf$`x>c-Bzmq)@DB2xhV3I&p`6zvBgmaxojiOzmZOyXI
z{DE>u+wp+;d!RmMK?-nVr&{5L{cQ0x8%)hQ?*k`DhU8p6t%p3_QCly&1-m>B7Rblo
zTe?C*OhsfO>=*$$sua~E9V3ku*x7E-#xj<!3v}OCRSRY~a-SV2B6E6}1rT>_PYS&b
z<y{$q7DV{6XaPPYycauiB-+B{9GUXTo2VMwy$Cj>HiF)eeTb^x@{jorQr~-~Tz?X&
zPAO!$t~0157|2L9ZglAwuL=KWQGB?Do!UE5li_Z|K@GoTqv6`)KE$KOc{QKw;+xa9
zefXeZZwBh(Q<saEY<Q_M?lzLHF%wR=Bbrp6oxWQTDr5WU`V6qv;efk@YE*q>Gu<@y
z2_IQIfJ6JLE#V}{I#-bUT~AeRX~Bs)aoD2(nS_pv<*^Jfmm5PzFyCuS;ilVw6UZ^T
z+oPn`QBtuVpIF#3Gl`Rl$52q~nFOXnY(jy}3oxbinr(a!o78-}Ab`y}ZE-@Q4>CAg
z>HJI<HP(``TsSf(6h-iLvNA62C&rU1)Fn*XJKiNZz5B!fzpR2Li#w|?o6Og35p;>Q
zXz_#bC;N=O?R)f9>X`cCa^}$DQLp@$lR!DFFB=s>QG5y9sEY$$0vs85>!^lzmIg0W
z8{?K!YoTXE5V0<+#f*u^8XcvBxz_=79pUjhTe5?VZ`+@jOHTJPCayQ^)fqWD4?(tz
zwup1KjDrsQfz*yvt}`8e!0xKnBYZ#NAgk2nh-bPf5d(4IU*a<Q8j>C2(MIjjXZL)H
zWABK;U(9P~Onk6xoM>HZArLsFWe@h0EDV$B9H7Va;ngIF52P)jj;GegWUPx<Nv{qV
zr(89hG%My$k}}KYzczgE=5fUV^uDAE3TZlgZc+#Bi9Nkv_$`%&rFsxL+0ANUmigsb
z5L?oDK4gDhRZND~L9|4;Y(adRKHrpX&yAvI{&yL!J^)CBBl)!X9AXXk8X3<dD)e;s
z7PAuwt#QU;LYl*z_X(9;=r&<vb!F7O8qzJJ1wg~=ipe~HaST=M)o|?Q$k5!TS9>Bk
zy#o7K(y6T(QJT6{I`+tPR`wv;ZLZ93GWn5d+bogAQGw3HAUNhhJNJ0q+dW)Z+N-PJ
z{wx5_yIqSBX`9v~6I`=9!$i*@_@4%c5kpjhv6E<EApya!I5|I=-St9d%olXpfDa`5
z0#x5BW1p7%79!tYQF9lA*2hR5ejAftUG~!24n}<$#dQ7n0V`oQQI-1E%;lOch1tY1
z17%L#4~=DP-1*?cyv@i{1uKS$mClK*Ut-jrSWhe`D`0A4KgF6h`?0hZY?bGPQ_SRs
z74v<!oaelq<KRa~o#{c#H8Md?NL|$_xZ}6PmOkH)H#+&9Bd0z$KxQ{qAYEjhdv)V$
z&VK$n0ch6rH(*LJwx-4%J<aB#g9=zmow{?${7`AR(|qVw&7qqCD4aPSmt1xGQtzny
z!}Jkx{h^W~7t5ZSX2M%5o5;K`*NeFMM0(ZyYO=j~?lItpIK2Bo<qw<=G>-E?w$<|*
za~~`qrz|`Mc_or-v~#H}eS6DpQbVd{<V8QpJGyPW7v|X`*6d$NwRrB`q@VZdfldEN
z^d^_lvzfZ;<<K%OYBzoV+gF3zYoY#J1ec}M>fCS>gB$3aggY53rNyXgKx*=1GrxZl
z9hKm#_T<^LFrbHW+q-|ZuE5Gurdo(KW5Mm)w+F6^sX0?3T&e>eao={C>fYdU0F1Fg
zD^EOX%(XH-Q&A&)&Rzb*c(tC`fb0DB^Amhu+V!k1U)<M9e)_<<M3X(fOz~>LHj4Fd
zujYk$t7>Ou^LrU{F2g79aQ22RsR?z5CUBFg_IDHSpgj&s?=L1lFPe)yBg~iB1mU6d
zP4R!(rmsKfc>ZtVjq<<58wgxc5%yC@{LMjufd6Ysqis@$6A286c(0*L9%{^wD)mN^
zDr<daB%Hp|rN`Rj=|wHoQ{7&=z1C(9??^j76@v{Z&bg>sCKYr!$rUf~?R*>s_W)s>
zPnkb2T}%>QZROAQbDjpRJ#DKggZ0(q<X7^qMC?6UI@C1Yf)-QP(T@DwCQJ;gjc)8O
ztS_BX>d=H;v(@FbOa{ODI(cqzqgw2EQ{HDQQ3;8@#hDjd3L4Zj633CQYuTLg9;GeS
zYlfz2pG$dh@5>KKUEF%w!+^6bud@;CE;KQ@HetbR7W#qn`jrDSBs6m?0}kyAOb+2N
zF`Rrfg^euSuPU9SC4b?OUBowz1ePo$OOqE#g>eo^0H%eABNv`Q)=*g_yU_Lnn?$ZF
zb{v}Qb^LmjTDII*?C4q9>&h7GO;*yEjV@*L1_`e>1P#k>eh_a8dTmmF%<+od)pq{P
z6Z^yLqCZ+JM0l7k57i|~@MT8?o?n}NY(jaAm}Z4+GGG|i2Sks&*}mqRzFy+K&2Yx=
zRqfx)yt{Tk))}g-^h<{Ph3(m4{^;O5utb8pryKDX2IvIFg%(5-2^i<^nlr}H0|@&S
z*Z$7)kylcJ0p+0zFrWe$45n=vDB=g#=eQ@vnSe#QIy&Qk;9Ujjf!*N(A;5~e&7DDa
z+VTnz$afMD#@zr%aKwA=rrDLuJ#j9lfXd)s4TGPJojK5UB~Aed|AXiQQTUHFeox_b
z!E;wZ9oN|rcftz05p9eIZWn*_Tg|kO%zZs*qaJs4aNALKGMeEW2{f;LfgmJpIGo&1
z^pFYB9!Dg&Is!q*?P+BZJbizK%)Q**opCNZ#e)B!E&b~}5b`fD=`_#=Ofwg*2nH&^
z;Xp-2rQHV#g#zIU3g0!D@~-xKT!9wb{jUuDr76-@MHveH-|-*%&;CDi?7n~KKif(W
z@b2@gAMLTV{mpL0|HADZ9sGaVtm{g<Pj;L;_R~3egWq<DJ%+Z@Zaai18{qERntk73
z7H*cVgq@oRi1>2{{6{vG$8Ikpg8fdS9ekD9F9Ma<4zB9=1ivF|QM7Zlvpyg!hCp-!
zLXIjQrTGEEdwRO796PovIubGNcmmers2kByPVPGdi|A(Wg~k1Uy8Sjj?5_$?7}|Mq
zbNm6=qE+*Quk~*yA0p0ygLVWJIl#YuKqW;*s3On-_+3*_fWT;}cO$MpG_V3(5&EYF
z216A8{tgQMLsNht5b!_0gM$AagLXmusVRV!5ek242#C^OV?g1Ezcd*5uf7nazvrhw
z%lMZDh5j~YPa=kPix796HYfPucKq8VhPk=X_Qb!O;+-o12!a0e+`|(?^xSovmJb2u
Lkde_f(c}0Z_JB4P

